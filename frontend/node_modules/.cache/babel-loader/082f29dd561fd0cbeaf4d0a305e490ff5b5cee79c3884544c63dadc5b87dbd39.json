{"ast":null,"code":"var _jsxFileName = \"/Users/nechama/Downloads/personal_finance_managment/frontend/src/components/Transactions.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Expenses from './Expenses';\nimport Incomes from './Incomes';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Transactions = () => {\n  _s();\n  const [expenses, setExpenses] = useState([]);\n  const [incomes, setIncomes] = useState([]);\n  const email = \"example@example.com\";\n  useEffect(() => {\n    const fetchExpenses = async () => {\n      const response = await fetch(`/api/expenses/${email}`);\n      const data = await response.json();\n      setExpenses(data);\n    };\n    const fetchIncomes = async () => {\n      const response = await fetch(`/api/incomes/${email}`);\n      const data = await response.json();\n      setIncomes(data);\n    };\n    fetchExpenses();\n    fetchIncomes();\n  }, [email]);\n  const updateExpense = async expense => {\n    const response = await fetch(`/api/expenses/${expense.ExpenseID}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(expense)\n    });\n    const updatedExpense = await response.json();\n    setExpenses(expenses.map(e => e.ExpenseID === updatedExpense.ExpenseID ? updatedExpense : e));\n  };\n  const deleteExpense = async id => {\n    await fetch(`/api/expenses/${id}`, {\n      method: 'DELETE'\n    });\n    setExpenses(expenses.filter(e => e.ExpenseID !== id));\n  };\n  const createExpense = async newExpense => {\n    const response = await fetch('/api/expenses', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(newExpense)\n    });\n    const createdExpense = await response.json();\n    setExpenses([...expenses, createdExpense]);\n  };\n  const updateIncome = async income => {\n    const response = await fetch(`/api/incomes/${income.IncomeID}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(income)\n    });\n    const updatedIncome = await response.json();\n    setIncomes(incomes.map(i => i.IncomeID === updatedIncome.IncomeID ? updatedIncome : i));\n  };\n  const deleteIncome = async id => {\n    await fetch(`/api/incomes/${id}`, {\n      method: 'DELETE'\n    });\n    setIncomes(incomes.filter(i => i.IncomeID !== id));\n  };\n  const createIncome = async newIncome => {\n    const response = await fetch('/api/incomes', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(newIncome)\n    });\n    const createdIncome = await response.json();\n    setIncomes([...incomes, createdIncome]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Transactions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'space-around'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Expenses, {\n        expenses: expenses,\n        updateExpense: updateExpense,\n        deleteExpense: deleteExpense,\n        createExpense: createExpense\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Incomes, {\n        incomes: incomes,\n        updateIncome: updateIncome,\n        deleteIncome: deleteIncome,\n        createIncome: createIncome\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n};\n_s(Transactions, \"7/qE6LQ1g13AuGgT57tTE8qiysE=\");\n_c = Transactions;\nexport default Transactions;\nvar _c;\n$RefreshReg$(_c, \"Transactions\");","map":{"version":3,"names":["React","useState","useEffect","Expenses","Incomes","jsxDEV","_jsxDEV","Transactions","_s","expenses","setExpenses","incomes","setIncomes","email","fetchExpenses","response","fetch","data","json","fetchIncomes","updateExpense","expense","ExpenseID","method","headers","body","JSON","stringify","updatedExpense","map","e","deleteExpense","id","filter","createExpense","newExpense","createdExpense","updateIncome","income","IncomeID","updatedIncome","i","deleteIncome","createIncome","newIncome","createdIncome","children","fileName","_jsxFileName","lineNumber","columnNumber","style","display","justifyContent","_c","$RefreshReg$"],"sources":["/Users/nechama/Downloads/personal_finance_managment/frontend/src/components/Transactions.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Expenses from './Expenses';\nimport Incomes from './Incomes';\n\ninterface Expense {\n  ExpenseID: number;\n  description: string;\n  amount: number;\n  date: string;\n  categoryName: string;\n}\n\ninterface Income {\n  IncomeID: number;\n  description: string;\n  amount: number;\n  date: string;\n  categoryName: string;\n}\n\nconst Transactions: React.FC = () => {\n  const [expenses, setExpenses] = useState<Expense[]>([]);\n  const [incomes, setIncomes] = useState<Income[]>([]);\n  const email = \"example@example.com\";\n\n  useEffect(() => {\n    const fetchExpenses = async () => {\n      const response = await fetch(`/api/expenses/${email}`);\n      const data = await response.json();\n      setExpenses(data);\n    };\n\n    const fetchIncomes = async () => {\n      const response = await fetch(`/api/incomes/${email}`);\n      const data = await response.json();\n      setIncomes(data);\n    };\n\n    fetchExpenses();\n    fetchIncomes();\n  }, [email]);\n\n  const updateExpense = async (expense: Expense) => {\n    const response = await fetch(`/api/expenses/${expense.ExpenseID}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(expense),\n    });\n    const updatedExpense = await response.json();\n    setExpenses(expenses.map(e => (e.ExpenseID === updatedExpense.ExpenseID ? updatedExpense : e)));\n  };\n\n  const deleteExpense = async (id: number) => {\n    await fetch(`/api/expenses/${id}`, {\n      method: 'DELETE',\n    });\n    setExpenses(expenses.filter(e => e.ExpenseID !== id));\n  };\n\n  const createExpense = async (newExpense: Omit<Expense, 'ExpenseID'>) => {\n    const response = await fetch('/api/expenses', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(newExpense),\n    });\n    const createdExpense = await response.json();\n    setExpenses([...expenses, createdExpense]);\n  };\n\n  const updateIncome = async (income: Income) => {\n    const response = await fetch(`/api/incomes/${income.IncomeID}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(income),\n    });\n    const updatedIncome = await response.json();\n    setIncomes(incomes.map(i => (i.IncomeID === updatedIncome.IncomeID ? updatedIncome : i)));\n  };\n\n  const deleteIncome = async (id: number) => {\n    await fetch(`/api/incomes/${id}`, {\n      method: 'DELETE',\n    });\n    setIncomes(incomes.filter(i => i.IncomeID !== id));\n  };\n\n  const createIncome = async (newIncome: Omit<Income, 'IncomeID'>) => {\n    const response = await fetch('/api/incomes', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(newIncome),\n    });\n    const createdIncome = await response.json();\n    setIncomes([...incomes, createdIncome]);\n  };\n\n  return (\n    <div>\n      <h1>Transactions</h1>\n      <div style={{ display: 'flex', justifyContent: 'space-around' }}>\n        <Expenses\n          expenses={expenses}\n          updateExpense={updateExpense}\n          deleteExpense={deleteExpense}\n          createExpense={createExpense}\n        />\n        <Incomes\n          incomes={incomes}\n          updateIncome={updateIncome}\n          deleteIncome={deleteIncome}\n          createIncome={createIncome}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Transactions;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}