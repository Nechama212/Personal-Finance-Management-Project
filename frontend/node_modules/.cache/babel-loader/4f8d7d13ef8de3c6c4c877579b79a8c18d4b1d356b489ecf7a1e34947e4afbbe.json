{"ast":null,"code":"var _jsxFileName = \"/Users/nechama/Downloads/personal_finance_managment/frontend/src/components/Transactions.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\n\n// Define interfaces for Expense and Income objects\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Transactions = () => {\n  _s();\n  const [expenses, setExpenses] = useState([]);\n  const [incomes, setIncomes] = useState([]);\n  const email = \"example@example.com\";\n  const expensesRef = useRef([]);\n  const incomesRef = useRef([]);\n\n  // Fetch expenses and incomes from the server\n  useEffect(() => {\n    const fetchExpenses = async () => {\n      try {\n        const response = await fetch(`http://localhost:3000/api/expenses/${email}`);\n        if (!response.ok) {\n          throw new Error(`Error: ${response.statusText}`);\n        }\n        const text = await response.text();\n        console.log(\"Response text:\", text); // Add this line\n        try {\n          const data = JSON.parse(text);\n          const mappedData = data.map(expense => ({\n            id: expense.ExpenseID,\n            description: expense.Description,\n            amount: expense.Amount,\n            date: expense.Date,\n            categoryName: expense.CategoryName\n          }));\n          expensesRef.current = mappedData;\n          setExpenses(mappedData);\n        } catch (jsonError) {\n          if (jsonError instanceof Error) {\n            throw new Error('Failed to parse JSON: ' + jsonError.message);\n          } else {\n            throw new Error('Failed to parse JSON');\n          }\n        }\n      } catch (error) {\n        console.error(\"Error fetching expenses:\", error);\n      }\n    };\n    const fetchIncomes = async () => {\n      try {\n        const response = await fetch(`http://localhost:3000/api/incomes/${email}`);\n        if (!response.ok) {\n          throw new Error(`Error: ${response.statusText}`);\n        }\n        const text = await response.text();\n        console.log(\"Response text:\", text); // Add this line\n        try {\n          const data = JSON.parse(text);\n          const mappedData = data.map(income => ({\n            id: income.IncomeID,\n            description: income.Description,\n            amount: income.Amount,\n            date: income.Date,\n            categoryName: income.CategoryName\n          }));\n          incomesRef.current = mappedData;\n          setIncomes(mappedData);\n        } catch (jsonError) {\n          if (jsonError instanceof Error) {\n            throw new Error('Failed to parse JSON: ' + jsonError.message);\n          } else {\n            throw new Error('Failed to parse JSON');\n          }\n        }\n      } catch (error) {\n        console.error(\"Error fetching incomes:\", error);\n      }\n    };\n    fetchExpenses();\n    fetchIncomes();\n  }, [email]);\n\n  // Function to create a new expense\n  const createExpense = useCallback(async () => {\n    try {\n      const response = await fetch(`http://localhost:3000/api/expenses`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          Email: email,\n          Amount: 100,\n          Date: new Date().toISOString(),\n          CategoryName: 'Food',\n          Description: 'Groceries'\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Error: ${response.statusText}`);\n      }\n      const newExpense = await response.json();\n      setExpenses(prevExpenses => [...prevExpenses, newExpense]);\n    } catch (error) {\n      console.error(\"Error creating expense:\", error);\n    }\n  }, [email]);\n\n  // Function to update an existing expense\n  const updateExpense = useCallback(async id => {\n    try {\n      const response = await fetch(`http://localhost:3000/api/expenses/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          Email: email,\n          Amount: 150,\n          Date: new Date().toISOString(),\n          CategoryName: 'Food',\n          Description: 'Groceries and snacks'\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Error: ${response.statusText}`);\n      }\n      const updatedExpense = await response.json();\n      setExpenses(prevExpenses => prevExpenses.map(expense => expense.id === id ? updatedExpense : expense));\n    } catch (error) {\n      console.error(\"Error updating expense:\", error);\n    }\n  }, [email]);\n\n  // Function to delete an expense\n  const deleteExpense = useCallback(async id => {\n    try {\n      const response = await fetch(`http://localhost:3000/api/expenses/${id}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        throw new Error(`Error: ${response.statusText}`);\n      }\n      setExpenses(prevExpenses => prevExpenses.filter(expense => expense.id !== id));\n    } catch (error) {\n      console.error(\"Error deleting expense:\", error);\n    }\n  }, []);\n\n  // Function to create a new income\n  const createIncome = useCallback(async () => {\n    try {\n      const response = await fetch(`http://localhost:3000/api/incomes`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          Email: email,\n          Amount: 2000,\n          Date: new Date().toISOString(),\n          CategoryName: 'Salary',\n          Description: 'Monthly salary'\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Error: ${response.statusText}`);\n      }\n      const newIncome = await response.json();\n      setIncomes(prevIncomes => [...prevIncomes, newIncome]);\n    } catch (error) {\n      console.error(\"Error creating income:\", error);\n    }\n  }, [email]);\n\n  // Function to update an existing income\n  const updateIncome = useCallback(async id => {\n    try {\n      const response = await fetch(`http://localhost:3000/api/incomes/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          Email: email,\n          Amount: 2500,\n          Date: new Date().toISOString(),\n          CategoryName: 'Salary',\n          Description: 'Monthly salary with bonus'\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Error: ${response.statusText}`);\n      }\n      const updatedIncome = await response.json();\n      setIncomes(prevIncomes => prevIncomes.map(income => income.id === id ? updatedIncome : income));\n    } catch (error) {\n      console.error(\"Error updating income:\", error);\n    }\n  }, [email]);\n\n  // Function to delete an income\n  const deleteIncome = useCallback(async id => {\n    try {\n      const response = await fetch(`http://localhost:3000/api/incomes/${id}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        throw new Error(`Error: ${response.statusText}`);\n      }\n      setIncomes(prevIncomes => prevIncomes.filter(income => income.id !== id));\n    } catch (error) {\n      console.error(\"Error deleting income:\", error);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Transactions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'space-around'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Expenses, {\n        expenses: expenses,\n        updateExpense: updateExpense,\n        deleteExpense: deleteExpense,\n        createExpense: createExpense\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Incomes, {\n        incomes: incomes,\n        updateIncome: updateIncome,\n        deleteIncome: deleteIncome,\n        createIncome: createIncome\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 230,\n    columnNumber: 5\n  }, this);\n};\n\n// Expenses component\n_s(Transactions, \"OnuAUDKaHTpd3233qeelctONiI8=\");\n_c = Transactions;\nconst Expenses = ({\n  expenses,\n  updateExpense,\n  deleteExpense,\n  createExpense\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n    children: \"Expenses\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 243,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: expenses.map(expense => /*#__PURE__*/_jsxDEV(\"li\", {\n      children: [expense.date, \": \", expense.description, \" - $\", expense.amount, \" (Category: \", expense.categoryName, \")\", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => updateExpense(expense.id),\n        children: \"Update\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => deleteExpense(expense.id),\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 11\n      }, this)]\n    }, expense.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 244,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: createExpense,\n    children: \"Create Expense\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 253,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 242,\n  columnNumber: 3\n}, this);\n\n// Incomes component\n_c2 = Expenses;\nconst Incomes = ({\n  incomes,\n  updateIncome,\n  deleteIncome,\n  createIncome\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n    children: \"Incomes\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 260,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: incomes.map(income => /*#__PURE__*/_jsxDEV(\"li\", {\n      children: [income.date, \": \", income.description, \" - $\", income.amount, \" (Category: \", income.categoryName, \")\", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => updateIncome(income.id),\n        children: \"Update\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => deleteIncome(income.id),\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 11\n      }, this)]\n    }, income.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 261,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: createIncome,\n    children: \"Create Income\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 270,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 259,\n  columnNumber: 3\n}, this);\n_c3 = Incomes;\nexport default Transactions;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Transactions\");\n$RefreshReg$(_c2, \"Expenses\");\n$RefreshReg$(_c3, \"Incomes\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","jsxDEV","_jsxDEV","Transactions","_s","expenses","setExpenses","incomes","setIncomes","email","expensesRef","incomesRef","fetchExpenses","response","fetch","ok","Error","statusText","text","console","log","data","JSON","parse","mappedData","map","expense","id","ExpenseID","description","Description","amount","Amount","date","Date","categoryName","CategoryName","current","jsonError","message","error","fetchIncomes","income","IncomeID","createExpense","method","headers","body","stringify","Email","toISOString","newExpense","json","prevExpenses","updateExpense","updatedExpense","deleteExpense","filter","createIncome","newIncome","prevIncomes","updateIncome","updatedIncome","deleteIncome","children","fileName","_jsxFileName","lineNumber","columnNumber","style","display","justifyContent","Expenses","Incomes","_c","onClick","_c2","_c3","$RefreshReg$"],"sources":["/Users/nechama/Downloads/personal_finance_managment/frontend/src/components/Transactions.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\n\n// Define interfaces for Expense and Income objects\ninterface Expense {\n  id: number;\n  description: string;\n  amount: number;\n  date: string;\n  categoryName: string;\n}\n\ninterface Income {\n  id: number;\n  description: string;\n  amount: number;\n  date: string;\n  categoryName: string;\n}\n\nconst Transactions: React.FC = () => {\n  const [expenses, setExpenses] = useState<Expense[]>([]);\n  const [incomes, setIncomes] = useState<Income[]>([]);\n  const email = \"example@example.com\"; \n  const expensesRef = useRef<Expense[]>([]);\n  const incomesRef = useRef<Income[]>([]);\n\n  // Fetch expenses and incomes from the server\n  useEffect(() => {\n    const fetchExpenses = async () => {\n      try {\n        const response = await fetch(`http://localhost:3000/api/expenses/${email}`);\n        if (!response.ok) {\n          throw new Error(`Error: ${response.statusText}`);\n        }\n        const text = await response.text();\n        console.log(\"Response text:\", text); // Add this line\n        try {\n          const data = JSON.parse(text);\n          const mappedData = data.map((expense: any) => ({\n            id: expense.ExpenseID,\n            description: expense.Description,\n            amount: expense.Amount,\n            date: expense.Date,\n            categoryName: expense.CategoryName\n          }));\n          expensesRef.current = mappedData;\n          setExpenses(mappedData);\n        } catch (jsonError) {\n          if (jsonError instanceof Error) {\n            throw new Error('Failed to parse JSON: ' + jsonError.message);\n          } else {\n            throw new Error('Failed to parse JSON');\n          }\n        }\n      } catch (error) {\n        console.error(\"Error fetching expenses:\", error);\n      }\n    };\n\n    const fetchIncomes = async () => {\n      try {\n        const response = await fetch(`http://localhost:3000/api/incomes/${email}`);\n        if (!response.ok) {\n          throw new Error(`Error: ${response.statusText}`);\n        }\n        const text = await response.text();\n        console.log(\"Response text:\", text); // Add this line\n        try {\n          const data = JSON.parse(text);\n          const mappedData = data.map((income: any) => ({\n            id: income.IncomeID,\n            description: income.Description,\n            amount: income.Amount,\n            date: income.Date,\n            categoryName: income.CategoryName\n          }));\n          incomesRef.current = mappedData;\n          setIncomes(mappedData);\n        } catch (jsonError) {\n          if (jsonError instanceof Error) {\n            throw new Error('Failed to parse JSON: ' + jsonError.message);\n          } else {\n            throw new Error('Failed to parse JSON');\n          }\n        }\n      } catch (error) {\n        console.error(\"Error fetching incomes:\", error);\n      }\n    };\n\n    fetchExpenses();\n    fetchIncomes();\n  }, [email]);\n\n  // Function to create a new expense\n  const createExpense = useCallback(async () => {\n    try {\n      const response = await fetch(`http://localhost:3000/api/expenses`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          Email: email,\n          Amount: 100,\n          Date: new Date().toISOString(),\n          CategoryName: 'Food',\n          Description: 'Groceries'\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Error: ${response.statusText}`);\n      }\n      const newExpense = await response.json();\n      setExpenses((prevExpenses) => [...prevExpenses, newExpense]);\n    } catch (error) {\n      console.error(\"Error creating expense:\", error);\n    }\n  }, [email]);\n\n  // Function to update an existing expense\n  const updateExpense = useCallback(async (id: number) => {\n    try {\n      const response = await fetch(`http://localhost:3000/api/expenses/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          Email: email,\n          Amount: 150,\n          Date: new Date().toISOString(),\n          CategoryName: 'Food',\n          Description: 'Groceries and snacks'\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Error: ${response.statusText}`);\n      }\n      const updatedExpense = await response.json();\n      setExpenses((prevExpenses) => prevExpenses.map(expense => expense.id === id ? updatedExpense : expense));\n    } catch (error) {\n      console.error(\"Error updating expense:\", error);\n    }\n  }, [email]);\n\n  // Function to delete an expense\n  const deleteExpense = useCallback(async (id: number) => {\n    try {\n      const response = await fetch(`http://localhost:3000/api/expenses/${id}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        throw new Error(`Error: ${response.statusText}`);\n      }\n      setExpenses((prevExpenses) => prevExpenses.filter(expense => expense.id !== id));\n    } catch (error) {\n      console.error(\"Error deleting expense:\", error);\n    }\n  }, []);\n\n  // Function to create a new income\n  const createIncome = useCallback(async () => {\n    try {\n      const response = await fetch(`http://localhost:3000/api/incomes`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          Email: email,\n          Amount: 2000,\n          Date: new Date().toISOString(),\n          CategoryName: 'Salary',\n          Description: 'Monthly salary'\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Error: ${response.statusText}`);\n      }\n      const newIncome = await response.json();\n      setIncomes((prevIncomes) => [...prevIncomes, newIncome]);\n    } catch (error) {\n      console.error(\"Error creating income:\", error);\n    }\n  }, [email]);\n\n  // Function to update an existing income\n  const updateIncome = useCallback(async (id: number) => {\n    try {\n      const response = await fetch(`http://localhost:3000/api/incomes/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          Email: email,\n          Amount: 2500,\n          Date: new Date().toISOString(),\n          CategoryName: 'Salary',\n          Description: 'Monthly salary with bonus'\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Error: ${response.statusText}`);\n      }\n      const updatedIncome = await response.json();\n      setIncomes((prevIncomes) => prevIncomes.map(income => income.id === id ? updatedIncome : income));\n    } catch (error) {\n      console.error(\"Error updating income:\", error);\n    }\n  }, [email]);\n\n  // Function to delete an income\n  const deleteIncome = useCallback(async (id: number) => {\n    try {\n      const response = await fetch(`http://localhost:3000/api/incomes/${id}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        throw new Error(`Error: ${response.statusText}`);\n      }\n      setIncomes((prevIncomes) => prevIncomes.filter(income => income.id !== id));\n    } catch (error) {\n      console.error(\"Error deleting income:\", error);\n    }\n  }, []);\n\n  return (\n    <div>\n      <h1>Transactions</h1>\n      <div style={{ display: 'flex', justifyContent: 'space-around' }}>\n        <Expenses expenses={expenses} updateExpense={updateExpense} deleteExpense={deleteExpense} createExpense={createExpense} />\n        <Incomes incomes={incomes} updateIncome={updateIncome} deleteIncome={deleteIncome} createIncome={createIncome} />\n      </div>\n    </div>\n  );\n};\n\n// Expenses component\nconst Expenses: React.FC<{ expenses: Expense[], updateExpense: (id: number) => void, deleteExpense: (id: number) => void, createExpense: () => void }> = ({ expenses, updateExpense, deleteExpense, createExpense }) => (\n  <div>\n    <h2>Expenses</h2>\n    <ul>\n      {expenses.map(expense => (\n        <li key={expense.id}>\n          {expense.date}: {expense.description} - ${expense.amount} (Category: {expense.categoryName})\n          <button onClick={() => updateExpense(expense.id)}>Update</button>\n          <button onClick={() => deleteExpense(expense.id)}>Delete</button>\n        </li>\n      ))}\n    </ul>\n    <button onClick={createExpense}>Create Expense</button>\n  </div>\n);\n\n// Incomes component\nconst Incomes: React.FC<{ incomes: Income[], updateIncome: (id: number) => void, deleteIncome: (id: number) => void, createIncome: () => void }> = ({ incomes, updateIncome, deleteIncome, createIncome }) => (\n  <div>\n        <h2>Incomes</h2>\n    <ul>\n      {incomes.map(income => (\n        <li key={income.id}>\n          {income.date}: {income.description} - ${income.amount} (Category: {income.categoryName})\n          <button onClick={() => updateIncome(income.id)}>Update</button>\n          <button onClick={() => deleteIncome(income.id)}>Delete</button>\n        </li>\n      ))}\n    </ul>\n    <button onClick={createIncome}>Create Income</button>\n  </div>\n);\n\nexport default Transactions;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}