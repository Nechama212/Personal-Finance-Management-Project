{"ast":null,"code":"var _jsxFileName = \"/Users/nechama/Downloads/personal_finance_managment/frontend/src/components/Transactions/Transactions.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Expenses from './Expenses';\nimport Incomes from './Incomes';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Transactions = () => {\n  _s();\n  const [email, setEmail] = useState(\"example@example.com\");\n  const [expenses, setExpenses] = useState([]);\n  const [incomes, setIncomes] = useState([]);\n  const [expenseCategories, setExpenseCategories] = useState([]);\n  const [incomeCategories, setIncomeCategories] = useState([]);\n  useEffect(() => {\n    const fetchExpenses = async () => {\n      try {\n        const response = await fetch(`/api/expenses/${email}`);\n        const data = await response.json();\n        console.log(\"Fetched Expenses:\", data);\n        setExpenses(data);\n      } catch (error) {\n        console.error(\"Error fetching expenses:\", error);\n      }\n    };\n    const fetchIncomes = async () => {\n      try {\n        const response = await fetch(`/api/incomes/${email}`);\n        const data = await response.json();\n        console.log(\"Fetched Incomes:\", data);\n        setIncomes(data);\n      } catch (error) {\n        console.error(\"Error fetching incomes:\", error);\n      }\n    };\n    const fetchExpenseCategories = async () => {\n      try {\n        const response = await fetch('/api/expense-categories');\n        const data = await response.json();\n        console.log(\"Fetched Expense Categories:\", data);\n        setExpenseCategories(data);\n      } catch (error) {\n        console.error(\"Error fetching expense categories:\", error);\n      }\n    };\n    const fetchIncomeCategories = async () => {\n      try {\n        const response = await fetch('/api/income-categories');\n        const data = await response.json();\n        console.log(\"Fetched Income Categories:\", data);\n        setIncomeCategories(data);\n      } catch (error) {\n        console.error(\"Error fetching income categories:\", error);\n      }\n    };\n    fetchExpenses();\n    fetchIncomes();\n    fetchExpenseCategories();\n    fetchIncomeCategories();\n  }, [email]);\n  const addCategory = async (categoryName, type) => {\n    const endpoint = type === 'expense' ? '/api/expense-categories' : '/api/income-categories';\n    try {\n      const response = await fetch(endpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          CategoryName: categoryName,\n          Email: email\n        })\n      });\n      if (!response.ok) {\n        const errorMessage = await response.text();\n        console.error(\"Error creating category:\", errorMessage);\n        return;\n      }\n      const newCategory = await response.json();\n      console.log(\"New Category:\", newCategory);\n      if (type === 'expense') {\n        setExpenseCategories([...expenseCategories, newCategory]);\n      } else {\n        setIncomeCategories([...incomeCategories, newCategory]);\n      }\n    } catch (error) {\n      console.error(`Error creating ${type} category:`, error);\n    }\n  };\n  const updateExpense = async expense => {\n    try {\n      const completeExpense = {\n        ...expense,\n        Email: email // Use current email state\n      };\n      console.log(\"Updating Expense Data:\", completeExpense);\n      const response = await fetch(`/api/expenses/${completeExpense.ExpenseID}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(completeExpense)\n      });\n      if (!response.ok) {\n        const errorMessage = await response.text();\n        console.error(\"Error updating expense:\", errorMessage);\n        return;\n      }\n      const updatedExpense = await response.json();\n      console.log(\"Updated Expense:\", updatedExpense);\n      setExpenses(expenses.map(e => e.ExpenseID === updatedExpense.ExpenseID ? updatedExpense : e));\n    } catch (error) {\n      console.error(\"Error updating expense:\", error);\n    }\n  };\n  const deleteExpense = async id => {\n    try {\n      await fetch(`/api/expenses/${id}`, {\n        method: 'DELETE'\n      });\n      setExpenses(expenses.filter(e => e.ExpenseID !== id));\n    } catch (error) {\n      console.error(\"Error deleting expense:\", error);\n    }\n  };\n  const createExpense = async newExpense => {\n    try {\n      console.log(\"New Expense Data:\", newExpense);\n      if (!newExpense.Date || isNaN(new Date(newExpense.Date).getTime())) {\n        throw new RangeError(\"Invalid time value\");\n      }\n      const completeExpense = {\n        ...newExpense,\n        Email: email,\n        // Use current email state\n        Amount: parseFloat(newExpense.Amount),\n        // Ensure amount is a number\n        Date: new Date(newExpense.Date).toISOString() // Update date format to ISO-8601\n      };\n      console.log(\"Creating expense:\", completeExpense);\n      const response = await fetch('/api/expenses', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(completeExpense)\n      });\n      if (!response.ok) {\n        const errorMessage = await response.text();\n        console.error(\"Error creating expense:\", errorMessage);\n        return;\n      }\n      const createdExpense = await response.json();\n      console.log(\"Created Expense:\", createdExpense);\n      setExpenses([...expenses, createdExpense]);\n    } catch (error) {\n      console.error(\"Error creating expense:\", error);\n    }\n  };\n  const updateIncome = async income => {\n    try {\n      const completeIncome = {\n        ...income,\n        Email: email // Use current email state\n      };\n      const response = await fetch(`/api/incomes/${completeIncome.IncomeID}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(completeIncome)\n      });\n      const updatedIncome = await response.json();\n      console.log(\"Updated Income:\", updatedIncome);\n      setIncomes(incomes.map(i => i.IncomeID === updatedIncome.IncomeID ? updatedIncome : i));\n    } catch (error) {\n      console.error(\"Error updating income:\", error);\n    }\n  };\n  const deleteIncome = async id => {\n    try {\n      await fetch(`/api/incomes/${id}`, {\n        method: 'DELETE'\n      });\n      setIncomes(incomes.filter(i => i.IncomeID !== id));\n    } catch (error) {\n      console.error(\"Error deleting income:\", error);\n    }\n  };\n  const createIncome = async newIncome => {\n    try {\n      console.log(\"New Income Data:\", newIncome);\n      if (!newIncome.Date || isNaN(new Date(newIncome.Date).getTime())) {\n        throw new RangeError(\"Invalid time value\");\n      }\n      const completeIncome = {\n        ...newIncome,\n        Email: email,\n        // Use current email state\n        Amount: parseFloat(newIncome.Amount),\n        // Ensure amount is a number\n        Date: new Date(newIncome.Date).toISOString() // Update date format to ISO-8601\n      };\n      console.log(\"Creating income:\", completeIncome);\n      const response = await fetch('/api/incomes', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(completeIncome)\n      });\n      if (!response.ok) {\n        const errorMessage = await response.text();\n        console.error(\"Error creating income:\", errorMessage);\n        return;\n      }\n      const createdIncome = await response.json();\n      console.log(\"Created Income:\", createdIncome);\n      setIncomes([...incomes, createdIncome]);\n    } catch (error) {\n      console.error(\"Error creating income:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Transactions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Email:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          value: email,\n          onChange: e => setEmail(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'space-around'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Expenses, {\n        expenses: expenses,\n        updateExpense: updateExpense,\n        deleteExpense: deleteExpense,\n        createExpense: createExpense,\n        addCategory: categoryName => addCategory(categoryName, 'expense'),\n        categories: expenseCategories // Pass expense categories prop\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Incomes, {\n        incomes: incomes,\n        updateIncome: updateIncome,\n        deleteIncome: deleteIncome,\n        createIncome: createIncome,\n        addCategory: categoryName => addCategory(categoryName, 'income'),\n        categories: incomeCategories // Pass income categories prop\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 266,\n    columnNumber: 5\n  }, this);\n};\n_s(Transactions, \"I1XspnCsSPGaxAdtl8A3jr1p8yw=\");\n_c = Transactions;\nexport default Transactions;\nvar _c;\n$RefreshReg$(_c, \"Transactions\");","map":{"version":3,"names":["React","useState","useEffect","Expenses","Incomes","jsxDEV","_jsxDEV","Transactions","_s","email","setEmail","expenses","setExpenses","incomes","setIncomes","expenseCategories","setExpenseCategories","incomeCategories","setIncomeCategories","fetchExpenses","response","fetch","data","json","console","log","error","fetchIncomes","fetchExpenseCategories","fetchIncomeCategories","addCategory","categoryName","type","endpoint","method","headers","body","JSON","stringify","CategoryName","Email","ok","errorMessage","text","newCategory","updateExpense","expense","completeExpense","ExpenseID","updatedExpense","map","e","deleteExpense","id","filter","createExpense","newExpense","Date","isNaN","getTime","RangeError","Amount","parseFloat","toISOString","createdExpense","updateIncome","income","completeIncome","IncomeID","updatedIncome","i","deleteIncome","createIncome","newIncome","createdIncome","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","target","style","display","justifyContent","categories","_c","$RefreshReg$"],"sources":["/Users/nechama/Downloads/personal_finance_managment/frontend/src/components/Transactions/Transactions.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Expenses from './Expenses';\nimport Incomes from './Incomes';\n\ninterface Expense {\n  ExpenseID: number;\n  Description: string;\n  Amount: number;\n  Date: string;\n  CategoryName: string;\n}\n\ninterface Income {\n  IncomeID: number;\n  Description: string;\n  Amount: number;\n  Date: string;\n  CategoryName: string;\n}\n\ninterface Category {\n  id: number;\n  name: string;\n}\n\nconst Transactions: React.FC = () => {\n  const [email, setEmail] = useState(\"example@example.com\");\n  const [expenses, setExpenses] = useState<Expense[]>([]);\n  const [incomes, setIncomes] = useState<Income[]>([]);\n  const [expenseCategories, setExpenseCategories] = useState<Category[]>([]);\n  const [incomeCategories, setIncomeCategories] = useState<Category[]>([]);\n\n  useEffect(() => {\n    const fetchExpenses = async () => {\n      try {\n        const response = await fetch(`/api/expenses/${email}`);\n        const data = await response.json();\n        console.log(\"Fetched Expenses:\", data);\n        setExpenses(data);\n      } catch (error) {\n        console.error(\"Error fetching expenses:\", error);\n      }\n    };\n\n    const fetchIncomes = async () => {\n      try {\n        const response = await fetch(`/api/incomes/${email}`);\n        const data = await response.json();\n        console.log(\"Fetched Incomes:\", data);\n        setIncomes(data);\n      } catch (error) {\n        console.error(\"Error fetching incomes:\", error);\n      }\n    };\n\n    const fetchExpenseCategories = async () => {\n      try {\n        const response = await fetch('/api/expense-categories');\n        const data = await response.json();\n        console.log(\"Fetched Expense Categories:\", data);\n        setExpenseCategories(data);\n      } catch (error) {\n        console.error(\"Error fetching expense categories:\", error);\n      }\n    };\n\n    const fetchIncomeCategories = async () => {\n      try {\n        const response = await fetch('/api/income-categories');\n        const data = await response.json();\n        console.log(\"Fetched Income Categories:\", data);\n        setIncomeCategories(data);\n      } catch (error) {\n        console.error(\"Error fetching income categories:\", error);\n      }\n    };\n\n    fetchExpenses();\n    fetchIncomes();\n    fetchExpenseCategories();\n    fetchIncomeCategories();\n  }, [email]);\n\n  const addCategory = async (categoryName: string, type: 'expense' | 'income') => {\n    const endpoint = type === 'expense' ? '/api/expense-categories' : '/api/income-categories';\n\n    try {\n      const response = await fetch(endpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ CategoryName: categoryName, Email: email }),\n      });\n\n      if (!response.ok) {\n        const errorMessage = await response.text();\n        console.error(\"Error creating category:\", errorMessage);\n        return;\n      }\n\n      const newCategory = await response.json();\n      console.log(\"New Category:\", newCategory); \n      if (type === 'expense') {\n        setExpenseCategories([...expenseCategories, newCategory]);\n      } else {\n        setIncomeCategories([...incomeCategories, newCategory]);\n      }\n    } catch (error) {\n      console.error(`Error creating ${type} category:`, error);\n    }\n  };\n\n  const updateExpense = async (expense: Expense) => {\n    try {\n      const completeExpense = {\n        ...expense,\n        Email: email, // Use current email state\n      };\n\n      console.log(\"Updating Expense Data:\", completeExpense);\n\n      const response = await fetch(`/api/expenses/${completeExpense.ExpenseID}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(completeExpense),\n      });\n\n      if (!response.ok) {\n        const errorMessage = await response.text();\n        console.error(\"Error updating expense:\", errorMessage);\n        return;\n      }\n\n      const updatedExpense = await response.json();\n      console.log(\"Updated Expense:\", updatedExpense);\n      setExpenses(expenses.map(e => (e.ExpenseID === updatedExpense.ExpenseID ? updatedExpense : e)));\n    } catch (error) {\n      console.error(\"Error updating expense:\", error);\n    }\n  };\n\n  const deleteExpense = async (id: number) => {\n    try {\n      await fetch(`/api/expenses/${id}`, {\n        method: 'DELETE',\n      });\n      setExpenses(expenses.filter(e => e.ExpenseID !== id));\n    } catch (error) {\n      console.error(\"Error deleting expense:\", error);\n    }\n  };\n\n  const createExpense = async (newExpense: Omit<Expense, 'ExpenseID'>) => {\n    try {\n      console.log(\"New Expense Data:\", newExpense);\n      if (!newExpense.Date || isNaN(new Date(newExpense.Date).getTime())) {\n        throw new RangeError(\"Invalid time value\");\n      }\n\n      const completeExpense = {\n        ...newExpense,\n        Email: email, // Use current email state\n        Amount: parseFloat(newExpense.Amount as any), // Ensure amount is a number\n        Date: new Date(newExpense.Date).toISOString(), // Update date format to ISO-8601\n      };\n\n      console.log(\"Creating expense:\", completeExpense);\n\n      const response = await fetch('/api/expenses', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(completeExpense),\n      });\n\n      if (!response.ok) {\n        const errorMessage = await response.text();\n        console.error(\"Error creating expense:\", errorMessage);\n        return;\n      }\n\n      const createdExpense = await response.json();\n      console.log(\"Created Expense:\", createdExpense);\n      setExpenses([...expenses, createdExpense]);\n    } catch (error) {\n      console.error(\"Error creating expense:\", error);\n    }\n  };\n\n  const updateIncome = async (income: Income) => {\n    try {\n      const completeIncome = {\n        ...income,\n        Email: email, // Use current email state\n      };\n\n      const response = await fetch(`/api/incomes/${completeIncome.IncomeID}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(completeIncome),\n      });\n      const updatedIncome = await response.json();\n      console.log(\"Updated Income:\", updatedIncome);\n      setIncomes(incomes.map(i => (i.IncomeID === updatedIncome.IncomeID ? updatedIncome : i)));\n    } catch (error) {\n      console.error(\"Error updating income:\", error);\n    }\n  };\n\n  const deleteIncome = async (id: number) => {\n    try {\n      await fetch(`/api/incomes/${id}`, {\n        method: 'DELETE',\n      });\n      setIncomes(incomes.filter(i => i.IncomeID !== id));\n    } catch (error) {\n      console.error(\"Error deleting income:\", error);\n    }\n  };\n\n  const createIncome = async (newIncome: Omit<Income, 'IncomeID'>) => {\n    try {\n      console.log(\"New Income Data:\", newIncome);\n      if (!newIncome.Date || isNaN(new Date(newIncome.Date).getTime())) {\n        throw new RangeError(\"Invalid time value\");\n      }\n\n      const completeIncome = {\n        ...newIncome,\n        Email: email, // Use current email state\n        Amount: parseFloat(newIncome.Amount as any), // Ensure amount is a number\n        Date: new Date(newIncome.Date).toISOString(), // Update date format to ISO-8601\n      };\n\n      console.log(\"Creating income:\", completeIncome);\n\n      const response = await fetch('/api/incomes', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(completeIncome),\n      });\n\n      if (!response.ok) {\n        const errorMessage = await response.text();\n        console.error(\"Error creating income:\", errorMessage);\n        return;\n      }\n\n      const createdIncome = await response.json();\n      console.log(\"Created Income:\", createdIncome);\n      setIncomes([...incomes, createdIncome]);\n    } catch (error) {\n      console.error(\"Error creating income:\", error);\n    }\n  };\n\n  return (\n    <div>\n      <h1>Transactions</h1>\n      <div>\n        <label>\n          Email:\n          <input type=\"email\" value={email} onChange={(e) => setEmail(e.target.value)} />\n        </label>\n      </div>\n      <div style={{ display: 'flex', justifyContent: 'space-around' }}>\n        <Expenses\n          expenses={expenses}\n          updateExpense={updateExpense}\n          deleteExpense={deleteExpense}\n          createExpense={createExpense}\n          addCategory={(categoryName) => addCategory(categoryName, 'expense')}\n          categories={expenseCategories} // Pass expense categories prop\n        />\n        <Incomes\n          incomes={incomes}\n          updateIncome={updateIncome}\n          deleteIncome={deleteIncome}\n          createIncome={createIncome}\n          addCategory={(categoryName) => addCategory(categoryName, 'income')}\n          categories={incomeCategories} // Pass income categories prop\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Transactions;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}