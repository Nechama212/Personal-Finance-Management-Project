{"ast":null,"code":"var _jsxFileName = \"/Users/nechama/Downloads/personal_finance_managment/frontend/src/components/MonthlyBudget/MonthlyBudget.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport CategorySelector from './CategorySelector';\nimport BudgetInput from './BudgetInput';\nimport { useUser } from '../../context/UserContext';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MonthlyBudget = () => {\n  _s();\n  const {\n    email\n  } = useUser();\n  const [categories, setCategories] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState('');\n  const [monthlyBudgets, setMonthlyBudgets] = useState([]);\n  const [expenses, setExpenses] = useState([]);\n  const [showBudgetForm, setShowBudgetForm] = useState(false);\n  const [showAddCategory, setShowAddCategory] = useState(false);\n  const [newCategory, setNewCategory] = useState('');\n\n  // Fetch data when the email is available\n  useEffect(() => {\n    if (email) {\n      fetch(`/api/expenses/${email}`).then(response => response.json()).then(data => {\n        const categoryNames = [...new Set(data.map(expense => expense.CategoryName.toLowerCase()))];\n        setCategories(categoryNames);\n        setExpenses(data);\n      }).catch(error => console.error('Error fetching expense categories:', error));\n      fetch(`/api/monthlyBudgets/${email}`).then(response => response.json()).then(data => {\n        if (Array.isArray(data)) {\n          setMonthlyBudgets(data);\n        } else {\n          console.error('Error: Data is not an array', data);\n        }\n      }).catch(error => console.error('Error fetching budgets:', error));\n    }\n  }, [email]);\n  const handleCategorySelect = category => {\n    if (category === 'Other') {\n      setShowAddCategory(true);\n    } else {\n      setSelectedCategory(category.toLowerCase());\n      setShowAddCategory(false);\n    }\n  };\n  const handleAddCategory = async () => {\n    if (newCategory && !categories.includes(newCategory.toLowerCase())) {\n      try {\n        const response = await fetch('/api/categories', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            CategoryName: newCategory,\n            Email: email\n          })\n        });\n        if (!response.ok) {\n          const errorMessage = await response.text();\n          console.error(\"Error creating category:\", errorMessage);\n          return;\n        }\n        const addedCategory = await response.json();\n        setCategories([...categories, addedCategory.CategoryName.toLowerCase()]);\n        setSelectedCategory(addedCategory.CategoryName.toLowerCase());\n        setShowAddCategory(false);\n        setNewCategory('');\n      } catch (error) {\n        console.error(\"Error creating category:\", error);\n      }\n    }\n  };\n  const handleBudgetSave = amount => {\n    const categoryExists = monthlyBudgets.some(budget => budget.CategoryName.toLowerCase() === selectedCategory);\n    if (categoryExists) {\n      alert('Category already exists in your budgets.');\n      return;\n    }\n    const data = {\n      Email: email,\n      CategoryName: selectedCategory,\n      BudgetAmount: parseFloat(amount.toString()),\n      SpentAmount: 0,\n      BudgetMonth: new Date().toISOString()\n    };\n    fetch('/api/monthlyBudgets', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    }).then(response => {\n      if (!response.ok) {\n        return response.json().then(error => {\n          throw new Error(error.error);\n        });\n      }\n      return response.json();\n    }).then(data => {\n      alert('Budget saved successfully!');\n      if (Array.isArray(monthlyBudgets)) {\n        setMonthlyBudgets([...monthlyBudgets, data]);\n      }\n      setShowBudgetForm(false);\n    }).catch(error => console.error('Error saving budget:', error));\n  };\n  const handleBudgetDelete = budgetId => {\n    fetch(`/api/monthlyBudgets/${budgetId}`, {\n      method: 'DELETE'\n    }).then(response => {\n      if (response.ok) {\n        setMonthlyBudgets(monthlyBudgets.filter(budget => budget.BudgetID !== budgetId));\n      } else {\n        console.error('Error deleting budget');\n      }\n    }).catch(error => console.error('Error deleting budget:', error));\n  };\n  const calculateSpentAmount = categoryName => {\n    const lowerCategoryName = categoryName.toLowerCase();\n    return expenses.filter(expense => expense.CategoryName.toLowerCase() === lowerCategoryName).reduce((total, expense) => total + expense.Amount, 0);\n  };\n  const isOverBudget = budget => {\n    const spentAmount = calculateSpentAmount(budget.CategoryName);\n    return spentAmount > budget.BudgetAmount;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Monthly Budget\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), email && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setShowBudgetForm(true),\n        children: \"Create Monthly Budget\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }, this), showBudgetForm && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(CategorySelector, {\n          categories: [\"Select Category\", ...categories, \"Other\"],\n          onSelect: handleCategorySelect\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 15\n        }, this), selectedCategory && selectedCategory !== \"Select Category\" && !showAddCategory && /*#__PURE__*/_jsxDEV(BudgetInput, {\n          onSave: handleBudgetSave\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 17\n        }, this), showAddCategory && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Enter new category\",\n            value: newCategory,\n            onChange: e => setNewCategory(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleAddCategory,\n            children: \"Add Category\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Your Monthly Budgets\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: Array.isArray(monthlyBudgets) && monthlyBudgets.map((budget, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [new Date(budget.BudgetMonth).toLocaleDateString(), \" - \", budget.CategoryName, \": \\u20AA\", budget.BudgetAmount, \" (Spent: \\u20AA\", calculateSpentAmount(budget.CategoryName), \")\", /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleBudgetDelete(budget.BudgetID),\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 17\n          }, this), isOverBudget(budget) && /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              color: 'red'\n            },\n            children: \"Over budget!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 19\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n};\n_s(MonthlyBudget, \"wkWwcJp3YVsvP7q4HZurM61AdR4=\", false, function () {\n  return [useUser];\n});\n_c = MonthlyBudget;\nexport default MonthlyBudget;\nvar _c;\n$RefreshReg$(_c, \"MonthlyBudget\");","map":{"version":3,"names":["React","useEffect","useState","CategorySelector","BudgetInput","useUser","jsxDEV","_jsxDEV","Fragment","_Fragment","MonthlyBudget","_s","email","categories","setCategories","selectedCategory","setSelectedCategory","monthlyBudgets","setMonthlyBudgets","expenses","setExpenses","showBudgetForm","setShowBudgetForm","showAddCategory","setShowAddCategory","newCategory","setNewCategory","fetch","then","response","json","data","categoryNames","Set","map","expense","CategoryName","toLowerCase","catch","error","console","Array","isArray","handleCategorySelect","category","handleAddCategory","includes","method","headers","body","JSON","stringify","Email","ok","errorMessage","text","addedCategory","handleBudgetSave","amount","categoryExists","some","budget","alert","BudgetAmount","parseFloat","toString","SpentAmount","BudgetMonth","Date","toISOString","Error","handleBudgetDelete","budgetId","filter","BudgetID","calculateSpentAmount","categoryName","lowerCategoryName","reduce","total","Amount","isOverBudget","spentAmount","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onSelect","onSave","type","placeholder","value","onChange","e","target","index","toLocaleDateString","style","color","_c","$RefreshReg$"],"sources":["/Users/nechama/Downloads/personal_finance_managment/frontend/src/components/MonthlyBudget/MonthlyBudget.tsx"],"sourcesContent":["import React, { useEffect, FC, useState } from 'react';\nimport { format, getMonth, getYear } from 'date-fns';\nimport CategorySelector from './CategorySelector';\nimport BudgetInput from './BudgetInput';\nimport { Expense, Budget } from './MonthlyBudgetTypes';\nimport { useUser } from '../../context/UserContext'; \n\nconst MonthlyBudget: FC = () => {\n  const { email } = useUser(); \n  const [categories, setCategories] = useState<string[]>([]);\n  const [selectedCategory, setSelectedCategory] = useState<string>('');\n  const [monthlyBudgets, setMonthlyBudgets] = useState<Budget[]>([]);\n  const [expenses, setExpenses] = useState<Expense[]>([]);\n  const [showBudgetForm, setShowBudgetForm] = useState<boolean>(false);\n  const [showAddCategory, setShowAddCategory] = useState<boolean>(false);\n  const [newCategory, setNewCategory] = useState<string>('');\n\n  // Fetch data when the email is available\n  useEffect(() => {\n    if (email) {\n      fetch(`/api/expenses/${email}`)\n        .then(response => response.json())\n        .then((data: Expense[]) => {\n          const categoryNames = [...new Set(data.map(expense => expense.CategoryName.toLowerCase()))];\n          setCategories(categoryNames);\n          setExpenses(data);\n        })\n        .catch(error => console.error('Error fetching expense categories:', error));\n\n      fetch(`/api/monthlyBudgets/${email}`)\n        .then(response => response.json())\n        .then((data: Budget[]) => {\n          if (Array.isArray(data)) {\n            setMonthlyBudgets(data);\n          } else {\n            console.error('Error: Data is not an array', data);\n          }\n        })\n        .catch(error => console.error('Error fetching budgets:', error));\n    }\n  }, [email]);\n\n  const handleCategorySelect = (category: string) => {\n    if (category === 'Other') {\n      setShowAddCategory(true);\n    } else {\n      setSelectedCategory(category.toLowerCase());\n      setShowAddCategory(false);\n    }\n  };\n\n  const handleAddCategory = async () => {\n    if (newCategory && !categories.includes(newCategory.toLowerCase())) {\n      try {\n        const response = await fetch('/api/categories', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ CategoryName: newCategory, Email: email }),\n        });\n\n        if (!response.ok) {\n          const errorMessage = await response.text();\n          console.error(\"Error creating category:\", errorMessage);\n          return;\n        }\n\n        const addedCategory = await response.json();\n        setCategories([...categories, addedCategory.CategoryName.toLowerCase()]);\n        setSelectedCategory(addedCategory.CategoryName.toLowerCase());\n        setShowAddCategory(false);\n        setNewCategory('');\n      } catch (error) {\n        console.error(\"Error creating category:\", error);\n      }\n    }\n  };\n\n  const handleBudgetSave = (amount: number) => {\n    const categoryExists = monthlyBudgets.some(budget => budget.CategoryName.toLowerCase() === selectedCategory);\n    if (categoryExists) {\n      alert('Category already exists in your budgets.');\n      return;\n    }\n\n    const data = {\n      Email: email,\n      CategoryName: selectedCategory,\n      BudgetAmount: parseFloat(amount.toString()),\n      SpentAmount: 0,\n      BudgetMonth: new Date().toISOString()\n    };\n\n    fetch('/api/monthlyBudgets', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data),\n    })\n      .then(response => {\n        if (!response.ok) {\n          return response.json().then(error => { throw new Error(error.error) });\n        }\n        return response.json();\n      })\n      .then(data => {\n        alert('Budget saved successfully!');\n        if (Array.isArray(monthlyBudgets)) {\n          setMonthlyBudgets([...monthlyBudgets, data]);\n        }\n        setShowBudgetForm(false);\n      })\n      .catch(error => console.error('Error saving budget:', error));\n  };\n\n  const handleBudgetDelete = (budgetId: number) => {\n    fetch(`/api/monthlyBudgets/${budgetId}`, {\n      method: 'DELETE',\n    })\n      .then(response => {\n        if (response.ok) {\n          setMonthlyBudgets(monthlyBudgets.filter(budget => budget.BudgetID !== budgetId));\n        } else {\n          console.error('Error deleting budget');\n        }\n      })\n      .catch(error => console.error('Error deleting budget:', error));\n  };\n\n  const calculateSpentAmount = (categoryName: string) => {\n    const lowerCategoryName = categoryName.toLowerCase();\n    return expenses\n      .filter(expense => expense.CategoryName.toLowerCase() === lowerCategoryName)\n      .reduce((total, expense) => total + expense.Amount, 0);\n  };\n\n  const isOverBudget = (budget: Budget) => {\n    const spentAmount = calculateSpentAmount(budget.CategoryName);\n    return spentAmount > budget.BudgetAmount;\n  };\n\n  return (\n    <div>\n      <h2>Monthly Budget</h2>\n      {email && (\n        <>\n          <button onClick={() => setShowBudgetForm(true)}>Create Monthly Budget</button>\n\n          {showBudgetForm && (\n            <div>\n              <CategorySelector\n                categories={[\"Select Category\", ...categories, \"Other\"]}\n                onSelect={handleCategorySelect}\n              />\n              {selectedCategory && selectedCategory !== \"Select Category\" && !showAddCategory && (\n                <BudgetInput onSave={handleBudgetSave} />\n              )}\n              {showAddCategory && (\n                <div>\n                  <input\n                    type=\"text\"\n                    placeholder=\"Enter new category\"\n                    value={newCategory}\n                    onChange={(e) => setNewCategory(e.target.value)}\n                  />\n                  <button onClick={handleAddCategory}>Add Category</button>\n                </div>\n              )}\n            </div>\n          )}\n\n          <h3>Your Monthly Budgets</h3>\n          <ul>\n            {Array.isArray(monthlyBudgets) && monthlyBudgets.map((budget, index) => (\n              <li key={index}>\n                {new Date(budget.BudgetMonth).toLocaleDateString()} - {budget.CategoryName}: ₪{budget.BudgetAmount} (Spent: ₪{calculateSpentAmount(budget.CategoryName)})\n                <button onClick={() => handleBudgetDelete(budget.BudgetID)}>Delete</button>\n                {isOverBudget(budget) && (\n                  <p style={{ color: 'red' }}>Over budget!</p>\n                )}\n              </li>\n            ))}\n          </ul>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default MonthlyBudget;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}