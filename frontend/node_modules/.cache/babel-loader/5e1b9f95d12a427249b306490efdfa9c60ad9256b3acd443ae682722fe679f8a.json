{"ast":null,"code":"var _jsxFileName = \"/Users/nechama/Downloads/personal_finance_managment/frontend/src/components/UploadExcel/UploadExpenses.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport * as XLSX from 'xlsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UploadExpenses = ({\n  userEmail,\n  createExpense,\n  categories,\n  setExpenseCategories\n}) => {\n  _s();\n  const [error, setError] = useState(null);\n\n  // Handle file upload\n  const handleFileUpload = async e => {\n    var _e$target$files;\n    const file = (_e$target$files = e.target.files) === null || _e$target$files === void 0 ? void 0 : _e$target$files[0];\n    if (!file) {\n      setError('No file selected.');\n      return;\n    }\n    const reader = new FileReader();\n    reader.onload = async event => {\n      var _event$target;\n      const data = new Uint8Array((_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.result);\n      const workbook = XLSX.read(data, {\n        type: 'array'\n      });\n      const sheetName = workbook.SheetNames[0];\n      const sheet = workbook.Sheets[sheetName];\n      const jsonData = XLSX.utils.sheet_to_json(sheet);\n      try {\n        const expenses = [];\n        for (const row of jsonData) {\n          // Validate required fields\n          if (!row.Description || !row.Amount || !row.Date || !row.CategoryName) {\n            throw new Error('Missing required fields in Excel file.');\n          }\n          const category = row.CategoryName.trim().toLowerCase();\n\n          // Check if category exists\n          if (!categories.includes(category)) {\n            console.log(`Category \"${category}\" does not exist. Creating...`);\n\n            // Add the category if it does not exist\n            try {\n              const response = await fetch('/api/categories/expense', {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                  CategoryName: category,\n                  Email: userEmail\n                })\n              });\n              if (!response.ok) {\n                throw new Error(`Failed to add category: ${category}`);\n              }\n              const newCategory = await response.json();\n              setExpenseCategories([...categories, newCategory.CategoryName.toLowerCase()]);\n              console.log(`Category \"${newCategory.CategoryName}\" created.`);\n            } catch (error) {\n              console.error(`Error creating category \"${category}\":`, error);\n              continue; // Skip this row\n            }\n          }\n          expenses.push({\n            Description: row.Description,\n            Amount: parseFloat(row.Amount),\n            Date: new Date(row.Date).toISOString().split('T')[0],\n            // Ensure \"yyyy-MM-dd\" format\n            CategoryName: category,\n            UserEmail: userEmail // Use provided email\n          });\n        }\n\n        // Upload each expense\n        expenses.forEach(createExpense);\n        setError(null); // Clear errors on success\n      } catch (error) {\n        setError('Error processing file. Please check the format.');\n      }\n    };\n    reader.readAsArrayBuffer(file);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Upload Expenses\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".xlsx, .xls\",\n      onChange: handleFileUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n_s(UploadExpenses, \"A8i/78Fx3FIozbyR2zwnz0NK35o=\");\n_c = UploadExpenses;\nexport default UploadExpenses;\nvar _c;\n$RefreshReg$(_c, \"UploadExpenses\");","map":{"version":3,"names":["React","useState","XLSX","jsxDEV","_jsxDEV","UploadExpenses","userEmail","createExpense","categories","setExpenseCategories","_s","error","setError","handleFileUpload","e","_e$target$files","file","target","files","reader","FileReader","onload","event","_event$target","data","Uint8Array","result","workbook","read","type","sheetName","SheetNames","sheet","Sheets","jsonData","utils","sheet_to_json","expenses","row","Description","Amount","Date","CategoryName","Error","category","trim","toLowerCase","includes","console","log","response","fetch","method","headers","body","JSON","stringify","Email","ok","newCategory","json","push","parseFloat","toISOString","split","UserEmail","forEach","readAsArrayBuffer","children","fileName","_jsxFileName","lineNumber","columnNumber","accept","onChange","style","color","_c","$RefreshReg$"],"sources":["/Users/nechama/Downloads/personal_finance_managment/frontend/src/components/UploadExcel/UploadExpenses.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport * as XLSX from 'xlsx';\nimport { Expense } from '../Transactions/TransactionsTypes';\n\ninterface UploadExpensesProps {\n  userEmail: string;\n  createExpense: (newExpense: Omit<Expense, 'ExpenseID'>) => void;\n  categories: string[];\n  setExpenseCategories: (categories: string[]) => void; // פונקציה לעדכון הקטגוריות\n}\n\nconst UploadExpenses: React.FC<UploadExpensesProps> = ({ userEmail, createExpense, categories, setExpenseCategories }) => {\n  const [error, setError] = useState<string | null>(null);\n\n  // Handle file upload\n  const handleFileUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (!file) {\n      setError('No file selected.');\n      return;\n    }\n\n    const reader = new FileReader();\n\n    reader.onload = async (event) => {\n      const data = new Uint8Array(event.target?.result as ArrayBuffer);\n      const workbook = XLSX.read(data, { type: 'array' });\n      const sheetName = workbook.SheetNames[0];\n      const sheet = workbook.Sheets[sheetName];\n      const jsonData = XLSX.utils.sheet_to_json(sheet);\n\n      try {\n        const expenses: Omit<Expense, 'ExpenseID'>[] = [];\n\n        for (const row of jsonData) {\n          // Validate required fields\n          if (!row.Description || !row.Amount || !row.Date || !row.CategoryName) {\n            throw new Error('Missing required fields in Excel file.');\n          }\n\n          const category = row.CategoryName.trim().toLowerCase();\n\n          // Check if category exists\n          if (!categories.includes(category)) {\n            console.log(`Category \"${category}\" does not exist. Creating...`);\n\n            // Add the category if it does not exist\n            try {\n              const response = await fetch('/api/categories/expense', {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ CategoryName: category, Email: userEmail }),\n              });\n\n              if (!response.ok) {\n                throw new Error(`Failed to add category: ${category}`);\n              }\n\n              const newCategory = await response.json();\n              setExpenseCategories([...categories, newCategory.CategoryName.toLowerCase()]);\n              console.log(`Category \"${newCategory.CategoryName}\" created.`);\n            } catch (error) {\n              console.error(`Error creating category \"${category}\":`, error);\n              continue; // Skip this row\n            }\n          }\n\n          expenses.push({\n            Description: row.Description,\n            Amount: parseFloat(row.Amount),\n            Date: new Date(row.Date).toISOString().split('T')[0], // Ensure \"yyyy-MM-dd\" format\n            CategoryName: category,\n            UserEmail: userEmail, // Use provided email\n          });\n        }\n\n        // Upload each expense\n        expenses.forEach(createExpense);\n        setError(null); // Clear errors on success\n      } catch (error) {\n        setError('Error processing file. Please check the format.');\n      }\n    };\n\n    reader.readAsArrayBuffer(file);\n  };\n\n  return (\n    <div>\n      <h3>Upload Expenses</h3>\n      <input type=\"file\" accept=\".xlsx, .xls\" onChange={handleFileUpload} />\n      {error && <p style={{ color: 'red' }}>{error}</p>}\n    </div>\n  );\n};\n\nexport default UploadExpenses;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}