{"ast":null,"code":"var _jsxFileName = \"/Users/nechama/Downloads/personal_finance_managment/frontend/src/components/Transactions.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Transactions = () => {\n  _s();\n  const [expenses, setExpenses] = useState([]);\n  const [incomes, setIncomes] = useState([]);\n  const email = \"example@example.com\";\n  const expensesRef = useRef([]);\n  const incomesRef = useRef([]);\n  useEffect(() => {\n    const fetchExpenses = async () => {\n      try {\n        const response = await fetch(`http://localhost:3000/api/expenses/${email}`);\n        if (!response.ok) {\n          throw new Error(`Error: ${response.statusText}`);\n        }\n        const data = await response.json();\n        const mappedData = data.map(expense => ({\n          id: expense.ExpenseID,\n          description: expense.Description,\n          amount: expense.Amount,\n          date: expense.Date,\n          categoryName: expense.CategoryName\n        }));\n        expensesRef.current = mappedData;\n        setExpenses(mappedData);\n      } catch (error) {\n        console.error(\"Error fetching expenses:\", error);\n      }\n    };\n    const fetchIncomes = async () => {\n      try {\n        const response = await fetch(`http://localhost:3000/api/incomes/${email}`);\n        if (!response.ok) {\n          throw new Error(`Error: ${response.statusText}`);\n        }\n        const data = await response.json();\n        const mappedData = data.map(income => ({\n          id: income.IncomeID,\n          description: income.Description,\n          amount: income.Amount,\n          date: income.Date,\n          categoryName: income.CategoryName\n        }));\n        incomesRef.current = mappedData;\n        setIncomes(mappedData);\n      } catch (error) {\n        console.error(\"Error fetching incomes:\", error);\n      }\n    };\n    fetchExpenses();\n    fetchIncomes();\n  }, [email]);\n  const createExpense = async () => {\n    try {\n      const response = await fetch(`http://localhost:3000/api/expenses`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          Email: email,\n          Amount: 100,\n          Date: new Date().toISOString(),\n          CategoryName: 'Food',\n          Description: 'Groceries'\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Error: ${response.statusText}`);\n      }\n      const newExpense = await response.json();\n      setExpenses([...expenses, newExpense]);\n    } catch (error) {\n      console.error(\"Error creating expense:\", error);\n    }\n  };\n  const updateExpense = async id => {\n    try {\n      const response = await fetch(`http://localhost:3000/api/expenses/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          Email: email,\n          Amount: 150,\n          Date: new Date().toISOString(),\n          CategoryName: 'Food',\n          Description: 'Groceries and snacks'\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Error: ${response.statusText}`);\n      }\n      const updatedExpense = await response.json();\n      setExpenses(expenses.map(expense => expense.id === id ? updatedExpense : expense));\n    } catch (error) {\n      console.error(\"Error updating expense:\", error);\n    }\n  };\n  const deleteExpense = async id => {\n    try {\n      const response = await fetch(`http://localhost:3000/api/expenses/${id}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        throw new Error(`Error: ${response.statusText}`);\n      }\n      setExpenses(expenses.filter(expense => expense.id !== id));\n    } catch (error) {\n      console.error(\"Error deleting expense:\", error);\n    }\n  };\n  const createIncome = async () => {\n    try {\n      const response = await fetch(`http://localhost:3000/api/incomes`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          Email: email,\n          Amount: 2000,\n          Date: new Date().toISOString(),\n          CategoryName: 'Salary',\n          Description: 'Monthly salary'\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Error: ${response.statusText}`);\n      }\n      const newIncome = await response.json();\n      setIncomes([...incomes, newIncome]);\n    } catch (error) {\n      console.error(\"Error creating income:\", error);\n    }\n  };\n  const updateIncome = async id => {\n    try {\n      const response = await fetch(`http://localhost:3000/api/incomes/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          Email: email,\n          Amount: 2500,\n          Date: new Date().toISOString(),\n          CategoryName: 'Salary',\n          Description: 'Monthly salary with bonus'\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Error: ${response.statusText}`);\n      }\n      const updatedIncome = await response.json();\n      setIncomes(incomes.map(income => income.id === id ? updatedIncome : income));\n    } catch (error) {\n      console.error(\"Error updating income:\", error);\n    }\n  };\n  const deleteIncome = async id => {\n    try {\n      const response = await fetch(`http://localhost:3000/api/incomes/${id}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        throw new Error(`Error: ${response.statusText}`);\n      }\n      setIncomes(incomes.filter(income => income.id !== id));\n    } catch (error) {\n      console.error(\"Error deleting income:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Transactions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'space-around'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Expenses\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: expenses.map(expense => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [expense.date, \": \", expense.description, \" - $\", expense.amount, \" (Category: \", expense.categoryName, \")\", /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => updateExpense(expense.id),\n              children: \"Update\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => deleteExpense(expense.id),\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 17\n            }, this)]\n          }, expense.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: createExpense,\n          children: \"Create Expense\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Incomes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: incomes.map(income => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [income.date, \": \", income.description, \" - $\", income.amount, \" (Category: \", income.categoryName, \")\", /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => updateIncome(income.id),\n              children: \"Update\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => deleteIncome(income.id),\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 17\n            }, this)]\n          }, income.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: createIncome,\n          children: \"Create Income\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 203,\n    columnNumber: 5\n  }, this);\n};\n_s(Transactions, \"LC5jGCkEfZcpNKedzJ7q/Yj+r2Q=\");\n_c = Transactions;\nexport default Transactions;\nvar _c;\n$RefreshReg$(_c, \"Transactions\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Transactions","_s","expenses","setExpenses","incomes","setIncomes","email","expensesRef","incomesRef","fetchExpenses","response","fetch","ok","Error","statusText","data","json","mappedData","map","expense","id","ExpenseID","description","Description","amount","Amount","date","Date","categoryName","CategoryName","current","error","console","fetchIncomes","income","IncomeID","createExpense","method","headers","body","JSON","stringify","Email","toISOString","newExpense","updateExpense","updatedExpense","deleteExpense","filter","createIncome","newIncome","updateIncome","updatedIncome","deleteIncome","children","fileName","_jsxFileName","lineNumber","columnNumber","style","display","justifyContent","onClick","_c","$RefreshReg$"],"sources":["/Users/nechama/Downloads/personal_finance_managment/frontend/src/components/Transactions.tsx"],"sourcesContent":["\nimport React, { useState, useEffect, useRef } from 'react';\n\ninterface Expense {\n  id: number;\n  description: string;\n  amount: number;\n  date: string;\n  categoryName: string;\n}\n\ninterface Income {\n  id: number;\n  description: string;\n  amount: number;\n  date: string;\n  categoryName: string;\n}\n\nconst Transactions: React.FC = () => {\n  const [expenses, setExpenses] = useState<Expense[]>([]);\n  const [incomes, setIncomes] = useState<Income[]>([]);\n  const email = \"example@example.com\"; \n  const expensesRef = useRef<Expense[]>([]);\n  const incomesRef = useRef<Income[]>([]);\n\n  useEffect(() => {\n    const fetchExpenses = async () => {\n      try {\n        const response = await fetch(`http://localhost:3000/api/expenses/${email}`);\n        if (!response.ok) {\n          throw new Error(`Error: ${response.statusText}`);\n        }\n        const data = await response.json();\n        const mappedData = data.map((expense: any) => ({\n          id: expense.ExpenseID,\n          description: expense.Description,\n          amount: expense.Amount,\n          date: expense.Date,\n          categoryName: expense.CategoryName\n        }));\n        expensesRef.current = mappedData;\n        setExpenses(mappedData);\n      } catch (error) {\n        console.error(\"Error fetching expenses:\", error);\n      }\n    };\n\n    const fetchIncomes = async () => {\n      try {\n        const response = await fetch(`http://localhost:3000/api/incomes/${email}`);\n        if (!response.ok) {\n          throw new Error(`Error: ${response.statusText}`);\n        }\n        const data = await response.json();\n        const mappedData = data.map((income: any) => ({\n          id: income.IncomeID,\n          description: income.Description,\n          amount: income.Amount,\n          date: income.Date,\n          categoryName: income.CategoryName\n        }));\n        incomesRef.current = mappedData;\n        setIncomes(mappedData);\n      } catch (error) {\n        console.error(\"Error fetching incomes:\", error);\n      }\n    };\n\n    fetchExpenses();\n    fetchIncomes();\n  }, [email]);\n\n  const createExpense = async () => {\n    try {\n      const response = await fetch(`http://localhost:3000/api/expenses`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          Email: email,\n          Amount: 100,\n          Date: new Date().toISOString(),\n          CategoryName: 'Food',\n          Description: 'Groceries'\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Error: ${response.statusText}`);\n      }\n      const newExpense = await response.json();\n      setExpenses([...expenses, newExpense]);\n    } catch (error) {\n      console.error(\"Error creating expense:\", error);\n    }\n  };\n\n  const updateExpense = async (id: number) => {\n    try {\n      const response = await fetch(`http://localhost:3000/api/expenses/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          Email: email,\n          Amount: 150,\n          Date: new Date().toISOString(),\n          CategoryName: 'Food',\n          Description: 'Groceries and snacks'\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Error: ${response.statusText}`);\n      }\n      const updatedExpense = await response.json();\n      setExpenses(expenses.map(expense => expense.id === id ? updatedExpense : expense));\n    } catch (error) {\n      console.error(\"Error updating expense:\", error);\n    }\n  };\n\n  const deleteExpense = async (id: number) => {\n    try {\n      const response = await fetch(`http://localhost:3000/api/expenses/${id}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        throw new Error(`Error: ${response.statusText}`);\n      }\n      setExpenses(expenses.filter(expense => expense.id !== id));\n    } catch (error) {\n      console.error(\"Error deleting expense:\", error);\n    }\n  };\n\n  const createIncome = async () => {\n    try {\n      const response = await fetch(`http://localhost:3000/api/incomes`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          Email: email,\n          Amount: 2000,\n          Date: new Date().toISOString(),\n          CategoryName: 'Salary',\n          Description: 'Monthly salary'\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Error: ${response.statusText}`);\n      }\n      const newIncome = await response.json();\n      setIncomes([...incomes, newIncome]);\n    } catch (error) {\n      console.error(\"Error creating income:\", error);\n    }\n  };\n\n  const updateIncome = async (id: number) => {\n    try {\n      const response = await fetch(`http://localhost:3000/api/incomes/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          Email: email,\n          Amount: 2500,\n          Date: new Date().toISOString(),\n          CategoryName: 'Salary',\n          Description: 'Monthly salary with bonus'\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Error: ${response.statusText}`);\n      }\n      const updatedIncome = await response.json();\n      setIncomes(incomes.map(income => income.id === id ? updatedIncome : income));\n    } catch (error) {\n      console.error(\"Error updating income:\", error);\n    }\n  };\n\n  const deleteIncome = async (id: number) => {\n    try {\n      const response = await fetch(`http://localhost:3000/api/incomes/${id}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        throw new Error(`Error: ${response.statusText}`);\n      }\n      setIncomes(incomes.filter(income => income.id !== id));\n    } catch (error) {\n      console.error(\"Error deleting income:\", error);\n    }\n  };\n\n  return (\n    <div>\n      <h1>Transactions</h1>\n      <div style={{ display: 'flex', justifyContent: 'space-around' }}>\n        <div>\n          <h2>Expenses</h2>\n          <ul>\n            {expenses.map(expense => (\n              <li key={expense.id}>\n                {expense.date}: {expense.description} - ${expense.amount} (Category: {expense.categoryName})\n                <button onClick={() => updateExpense(expense.id)}>Update</button>\n                <button onClick={() => deleteExpense(expense.id)}>Delete</button>\n              </li>\n            ))}\n          </ul>\n          <button onClick={createExpense}>Create Expense</button>\n        </div>\n        <div>\n          <h2>Incomes</h2>\n          <ul>\n            {incomes.map(income => (\n              <li key={income.id}>\n                {income.date}: {income.description} - ${income.amount} (Category: {income.categoryName})\n                <button onClick={() => updateIncome(income.id)}>Update</button>\n                <button onClick={() => deleteIncome(income.id)}>Delete</button>\n              </li>\n            ))}\n          </ul>\n          <button onClick={createIncome}>Create Income</button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Transactions;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}