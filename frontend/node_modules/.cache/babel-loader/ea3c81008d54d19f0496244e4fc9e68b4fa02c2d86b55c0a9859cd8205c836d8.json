{"ast":null,"code":"var _jsxFileName = \"/Users/nechama/Downloads/personal_finance_managment/frontend/src/components/MonthlyBudget/MonthlyBudget.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport CategorySelector from './CategorySelector';\nimport BudgetInput from './BudgetInput';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MonthlyBudget = () => {\n  _s();\n  const [userEmail, setUserEmail] = useState('');\n  const [categories, setCategories] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState('');\n  const [monthlyBudgets, setMonthlyBudgets] = useState([]);\n  useEffect(() => {\n    if (userEmail) {\n      // Fetch categories from the backend\n      fetch(`/api/categories?email=${userEmail}`).then(response => response.json()).then(data => setCategories(data)).catch(error => console.error('Error fetching categories:', error));\n\n      // Fetch monthly budgets from the backend\n      fetch(`/api/monthlyBudgets/${userEmail}`).then(response => response.json()).then(data => {\n        console.log('Fetched budgets:', data); // Log the fetched data\n        if (Array.isArray(data)) {\n          setMonthlyBudgets(data);\n        } else {\n          console.error('Error: Data is not an array', data);\n        }\n      }).catch(error => console.error('Error fetching budgets:', error));\n    }\n  }, [userEmail]);\n  const handleCategorySelect = category => {\n    setSelectedCategory(category);\n  };\n  const handleBudgetSave = amount => {\n    // Check if the category already exists in the budgets\n    const categoryExists = monthlyBudgets.some(budget => budget.CategoryName === selectedCategory);\n    if (categoryExists) {\n      alert('Category already exists in your budgets.');\n      return;\n    }\n\n    // Save budget to the backend\n    const data = {\n      Email: userEmail,\n      CategoryName: selectedCategory,\n      BudgetAmount: parseFloat(amount),\n      SpentAmount: 0,\n      // Initial value\n      BudgetMonth: new Date().toISOString()\n    };\n    console.log('Data sent:', data); // Log the data being sent\n\n    fetch('/api/monthlyBudgets', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    }).then(response => {\n      console.log('Response status:', response.status); // Log the response status\n      if (!response.ok) {\n        return response.json().then(error => {\n          throw new Error(error.error);\n        });\n      }\n      return response.json();\n    }).then(data => {\n      alert('Budget saved successfully!');\n      if (Array.isArray(monthlyBudgets)) {\n        setMonthlyBudgets([...monthlyBudgets, data]);\n      } else {\n        console.error('Error: monthlyBudgets is not an array', monthlyBudgets);\n      }\n    }).catch(error => console.error('Error saving budget:', error));\n  };\n  const calculateSpentAmount = categoryName => {\n    return monthlyBudgets.filter(budget => budget.CategoryName === categoryName).reduce((total, budget) => total + budget.BudgetAmount, 0);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Monthly Budget\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"email\",\n      placeholder: \"Enter your email\",\n      value: userEmail,\n      onChange: e => setUserEmail(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), userEmail && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(CategorySelector, {\n        categories: [\"Select Category\", ...categories] // Add \"Select Category\" to the dropdown\n        ,\n        onSelect: handleCategorySelect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this), selectedCategory && selectedCategory !== \"Select Category\" && /*#__PURE__*/_jsxDEV(BudgetInput, {\n        onSave: handleBudgetSave\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Your Monthly Budgets\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: Array.isArray(monthlyBudgets) && monthlyBudgets.map((budget, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [new Date(budget.BudgetMonth).toLocaleDateString(), \" - \", budget.CategoryName, \": \\u20AA\", budget.BudgetAmount, \" (Spent: \\u20AA\", calculateSpentAmount(budget.CategoryName), \")\"]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n_s(MonthlyBudget, \"/5HE7lvjiOHDg/hXufPWBxYoSR4=\");\n_c = MonthlyBudget;\nexport default MonthlyBudget;\nvar _c;\n$RefreshReg$(_c, \"MonthlyBudget\");","map":{"version":3,"names":["React","useState","useEffect","CategorySelector","BudgetInput","jsxDEV","_jsxDEV","Fragment","_Fragment","MonthlyBudget","_s","userEmail","setUserEmail","categories","setCategories","selectedCategory","setSelectedCategory","monthlyBudgets","setMonthlyBudgets","fetch","then","response","json","data","catch","error","console","log","Array","isArray","handleCategorySelect","category","handleBudgetSave","amount","categoryExists","some","budget","CategoryName","alert","Email","BudgetAmount","parseFloat","SpentAmount","BudgetMonth","Date","toISOString","method","headers","body","JSON","stringify","status","ok","Error","calculateSpentAmount","categoryName","filter","reduce","total","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onSelect","onSave","map","index","toLocaleDateString","_c","$RefreshReg$"],"sources":["/Users/nechama/Downloads/personal_finance_managment/frontend/src/components/MonthlyBudget/MonthlyBudget.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport CategorySelector from './CategorySelector';\nimport BudgetInput from './BudgetInput';\n\nconst MonthlyBudget = () => {\n  const [userEmail, setUserEmail] = useState('');\n  const [categories, setCategories] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState('');\n  const [monthlyBudgets, setMonthlyBudgets] = useState([]);\n\n  useEffect(() => {\n    if (userEmail) {\n      // Fetch categories from the backend\n      fetch(`/api/categories?email=${userEmail}`)\n        .then(response => response.json())\n        .then(data => setCategories(data))\n        .catch(error => console.error('Error fetching categories:', error));\n\n      // Fetch monthly budgets from the backend\n      fetch(`/api/monthlyBudgets/${userEmail}`)\n        .then(response => response.json())\n        .then(data => {\n          console.log('Fetched budgets:', data); // Log the fetched data\n          if (Array.isArray(data)) {\n            setMonthlyBudgets(data);\n          } else {\n            console.error('Error: Data is not an array', data);\n          }\n        })\n        .catch(error => console.error('Error fetching budgets:', error));\n    }\n  }, [userEmail]);\n\n  const handleCategorySelect = (category) => {\n    setSelectedCategory(category);\n  };\n\n  const handleBudgetSave = (amount) => {\n    // Check if the category already exists in the budgets\n    const categoryExists = monthlyBudgets.some(budget => budget.CategoryName === selectedCategory);\n    if (categoryExists) {\n      alert('Category already exists in your budgets.');\n      return;\n    }\n\n    // Save budget to the backend\n    const data = {\n      Email: userEmail,\n      CategoryName: selectedCategory,\n      BudgetAmount: parseFloat(amount),\n      SpentAmount: 0, // Initial value\n      BudgetMonth: new Date().toISOString()\n    };\n\n    console.log('Data sent:', data); // Log the data being sent\n\n    fetch('/api/monthlyBudgets', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data),\n    })\n      .then(response => {\n        console.log('Response status:', response.status); // Log the response status\n        if (!response.ok) {\n          return response.json().then(error => { throw new Error(error.error) });\n        }\n        return response.json();\n      })\n      .then(data => {\n        alert('Budget saved successfully!');\n        if (Array.isArray(monthlyBudgets)) {\n          setMonthlyBudgets([...monthlyBudgets, data]);\n        } else {\n          console.error('Error: monthlyBudgets is not an array', monthlyBudgets);\n        }\n      })\n      .catch(error => console.error('Error saving budget:', error));\n  };\n\n  const calculateSpentAmount = (categoryName) => {\n    return monthlyBudgets\n      .filter(budget => budget.CategoryName === categoryName)\n      .reduce((total, budget) => total + budget.BudgetAmount, 0);\n  };\n\n  return (\n    <div>\n      <h2>Monthly Budget</h2>\n      <input \n        type=\"email\" \n        placeholder=\"Enter your email\"\n        value={userEmail}\n        onChange={(e) => setUserEmail(e.target.value)} \n      />\n      {userEmail && (\n        <>\n          <CategorySelector \n            categories={[\"Select Category\", ...categories]} // Add \"Select Category\" to the dropdown\n            onSelect={handleCategorySelect} \n          />\n          {selectedCategory && selectedCategory !== \"Select Category\" && (\n            <BudgetInput onSave={handleBudgetSave} />\n          )}\n          \n          <h3>Your Monthly Budgets</h3>\n          <ul>\n            {Array.isArray(monthlyBudgets) && monthlyBudgets.map((budget, index) => (\n              <li key={index}>\n                {new Date(budget.BudgetMonth).toLocaleDateString()} - {budget.CategoryName}: ₪{budget.BudgetAmount} (Spent: ₪{calculateSpentAmount(budget.CategoryName)})\n              </li>\n            ))}\n          </ul>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default MonthlyBudget;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}