{"ast":null,"code":"var _jsxFileName = \"/Users/nechama/Downloads/personal_finance_managment/frontend/src/components/Transactions.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\n\n// Define interfaces for Expense and Income objects\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Transactions = () => {\n  _s();\n  const [expenses, setExpenses] = useState([]);\n  const [incomes, setIncomes] = useState([]);\n  const email = \"example@example.com\";\n  const expensesRef = useRef([]);\n  const incomesRef = useRef([]);\n\n  // Fetch expenses and incomes from the server\n  useEffect(() => {\n    const fetchExpenses = async () => {\n      try {\n        const response = await fetch(`http://localhost:3000/api/expenses/${email}`);\n        if (!response.ok) {\n          throw new Error(`Error: ${response.statusText}`);\n        }\n        const data = await response.json();\n        const mappedData = data.map(expense => ({\n          id: expense.ExpenseID,\n          description: expense.Description,\n          amount: expense.Amount,\n          date: expense.Date,\n          categoryName: expense.CategoryName\n        }));\n        expensesRef.current = mappedData;\n        setExpenses(mappedData);\n      } catch (error) {\n        console.error(\"Error fetching expenses:\", error);\n      }\n    };\n    const fetchIncomes = async () => {\n      try {\n        const response = await fetch(`http://localhost:3000/api/incomes/${email}`);\n        if (!response.ok) {\n          throw new Error(`Error: ${response.statusText}`);\n        }\n        const data = await response.json();\n        const mappedData = data.map(income => ({\n          id: income.IncomeID,\n          description: income.Description,\n          amount: income.Amount,\n          date: income.Date,\n          categoryName: income.CategoryName\n        }));\n        incomesRef.current = mappedData;\n        setIncomes(mappedData);\n      } catch (error) {\n        console.error(\"Error fetching incomes:\", error);\n      }\n    };\n    fetchExpenses();\n    fetchIncomes();\n  }, [email]);\n\n  // Function to create a new expense\n  const createExpense = useCallback(async () => {\n    try {\n      const response = await fetch(`http://localhost:3000/api/expenses`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          Email: email,\n          Amount: 100,\n          Date: new Date().toISOString(),\n          CategoryName: 'Food',\n          Description: 'Groceries'\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Error: ${response.statusText}`);\n      }\n      const newExpense = await response.json();\n      setExpenses(prevExpenses => [...prevExpenses, newExpense]);\n    } catch (error) {\n      console.error(\"Error creating expense:\", error);\n    }\n  }, [email]);\n\n  // Function to update an existing expense\n  const updateExpense = useCallback(async id => {\n    try {\n      const response = await fetch(`http://localhost:3000/api/expenses/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          Email: email,\n          Amount: 150,\n          Date: new Date().toISOString(),\n          CategoryName: 'Food',\n          Description: 'Groceries and snacks'\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Error: ${response.statusText}`);\n      }\n      const updatedExpense = await response.json();\n      setExpenses(prevExpenses => prevExpenses.map(expense => expense.id === id ? updatedExpense : expense));\n    } catch (error) {\n      console.error(\"Error updating expense:\", error);\n    }\n  }, [email]);\n\n  // Function to delete an expense\n  const deleteExpense = useCallback(async id => {\n    try {\n      const response = await fetch(`http://localhost:3000/api/expenses/${id}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        throw new Error(`Error: ${response.statusText}`);\n      }\n      setExpenses(prevExpenses => prevExpenses.filter(expense => expense.id !== id));\n    } catch (error) {\n      console.error(\"Error deleting expense:\", error);\n    }\n  }, []);\n\n  // Function to create a new income\n  const createIncome = useCallback(async () => {\n    try {\n      const response = await fetch(`http://localhost:3000/api/incomes`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          Email: email,\n          Amount: 2000,\n          Date: new Date().toISOString(),\n          CategoryName: 'Salary',\n          Description: 'Monthly salary'\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Error: ${response.statusText}`);\n      }\n      const newIncome = await response.json();\n      setIncomes(prevIncomes => [...prevIncomes, newIncome]);\n    } catch (error) {\n      console.error(\"Error creating income:\", error);\n    }\n  }, [email]);\n\n  // Function to update an existing income\n  const updateIncome = useCallback(async id => {\n    try {\n      const response = await fetch(`http://localhost:3000/api/incomes/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          Email: email,\n          Amount: 2500,\n          Date: new Date().toISOString(),\n          CategoryName: 'Salary',\n          Description: 'Monthly salary with bonus'\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Error: ${response.statusText}`);\n      }\n      const updatedIncome = await response.json();\n      setIncomes(prevIncomes => prevIncomes.map(income => income.id === id ? updatedIncome : income));\n    } catch (error) {\n      console.error(\"Error updating income:\", error);\n    }\n  }, [email]);\n\n  // Function to delete an income\n  const deleteIncome = useCallback(async id => {\n    try {\n      const response = await fetch(`http://localhost:3000/api/incomes/${id}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        throw new Error(`Error: ${response.statusText}`);\n      }\n      setIncomes(prevIncomes => prevIncomes.filter(income => income.id !== id));\n    } catch (error) {\n      console.error(\"Error deleting income:\", error);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Transactions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'space-around'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Expenses, {\n        expenses: expenses,\n        updateExpense: updateExpense,\n        deleteExpense: deleteExpense,\n        createExpense: createExpense\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Incomes, {\n        incomes: incomes,\n        updateIncome: updateIncome,\n        deleteIncome: deleteIncome,\n        createIncome: createIncome\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 210,\n    columnNumber: 5\n  }, this);\n};\n\n// Expenses component\n_s(Transactions, \"OnuAUDKaHTpd3233qeelctONiI8=\");\n_c = Transactions;\nconst Expenses = ({\n  expenses,\n  updateExpense,\n  deleteExpense,\n  createExpense\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n    children: \"Expenses\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 223,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: expenses.map(expense => /*#__PURE__*/_jsxDEV(\"li\", {\n      children: [expense.date, \": \", expense.description, \" - $\", expense.amount, \" (Category: \", expense.categoryName, \")\", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => updateExpense(expense.id),\n        children: \"Update\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => deleteExpense(expense.id),\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 11\n      }, this)]\n    }, expense.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 224,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: createExpense,\n    children: \"Create Expense\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 233,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 222,\n  columnNumber: 3\n}, this);\n\n// Incomes component\n_c2 = Expenses;\nconst Incomes = ({\n  incomes,\n  updateIncome,\n  deleteIncome,\n  createIncome\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n    children: \"Incomes\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 240,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: incomes.map(income => /*#__PURE__*/_jsxDEV(\"li\", {\n      children: [income.date, \": \", income.description, \" - $\", income.amount, \" (Category: \", income.categoryName, \")\", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => updateIncome(income.id),\n        children: \"Update\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => deleteIncome(income.id),\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 11\n      }, this)]\n    }, income.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 241,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: createIncome,\n    children: \"Create Income\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 250,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 239,\n  columnNumber: 3\n}, this);\n_c3 = Incomes;\nexport default Transactions;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Transactions\");\n$RefreshReg$(_c2, \"Expenses\");\n$RefreshReg$(_c3, \"Incomes\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","jsxDEV","_jsxDEV","Transactions","_s","expenses","setExpenses","incomes","setIncomes","email","expensesRef","incomesRef","fetchExpenses","response","fetch","ok","Error","statusText","data","json","mappedData","map","expense","id","ExpenseID","description","Description","amount","Amount","date","Date","categoryName","CategoryName","current","error","console","fetchIncomes","income","IncomeID","createExpense","method","headers","body","JSON","stringify","Email","toISOString","newExpense","prevExpenses","updateExpense","updatedExpense","deleteExpense","filter","createIncome","newIncome","prevIncomes","updateIncome","updatedIncome","deleteIncome","children","fileName","_jsxFileName","lineNumber","columnNumber","style","display","justifyContent","Expenses","Incomes","_c","onClick","_c2","_c3","$RefreshReg$"],"sources":["/Users/nechama/Downloads/personal_finance_managment/frontend/src/components/Transactions.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\n\n// Define interfaces for Expense and Income objects\ninterface Expense {\n  id: number;\n  description: string;\n  amount: number;\n  date: string;\n  categoryName: string;\n}\n\ninterface Income {\n  id: number;\n  description: string;\n  amount: number;\n  date: string;\n  categoryName: string;\n}\n\nconst Transactions: React.FC = () => {\n  const [expenses, setExpenses] = useState<Expense[]>([]);\n  const [incomes, setIncomes] = useState<Income[]>([]);\n  const email = \"example@example.com\"; \n  const expensesRef = useRef<Expense[]>([]);\n  const incomesRef = useRef<Income[]>([]);\n\n  // Fetch expenses and incomes from the server\n  useEffect(() => {\n    const fetchExpenses = async () => {\n      try {\n        const response = await fetch(`http://localhost:3000/api/expenses/${email}`);\n        if (!response.ok) {\n          throw new Error(`Error: ${response.statusText}`);\n        }\n        const data = await response.json();\n        const mappedData = data.map((expense: any) => ({\n          id: expense.ExpenseID,\n          description: expense.Description,\n          amount: expense.Amount,\n          date: expense.Date,\n          categoryName: expense.CategoryName\n        }));\n        expensesRef.current = mappedData;\n        setExpenses(mappedData);\n      } catch (error) {\n        console.error(\"Error fetching expenses:\", error);\n      }\n    };\n\n    const fetchIncomes = async () => {\n      try {\n        const response = await fetch(`http://localhost:3000/api/incomes/${email}`);\n        if (!response.ok) {\n          throw new Error(`Error: ${response.statusText}`);\n        }\n        const data = await response.json();\n        const mappedData = data.map((income: any) => ({\n          id: income.IncomeID,\n          description: income.Description,\n          amount: income.Amount,\n          date: income.Date,\n          categoryName: income.CategoryName\n        }));\n        incomesRef.current = mappedData;\n        setIncomes(mappedData);\n      } catch (error) {\n        console.error(\"Error fetching incomes:\", error);\n      }\n    };\n\n    fetchExpenses();\n    fetchIncomes();\n  }, [email]);\n\n  // Function to create a new expense\n  const createExpense = useCallback(async () => {\n    try {\n      const response = await fetch(`http://localhost:3000/api/expenses`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          Email: email,\n          Amount: 100,\n          Date: new Date().toISOString(),\n          CategoryName: 'Food',\n          Description: 'Groceries'\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Error: ${response.statusText}`);\n      }\n      const newExpense = await response.json();\n      setExpenses((prevExpenses) => [...prevExpenses, newExpense]);\n    } catch (error) {\n      console.error(\"Error creating expense:\", error);\n    }\n  }, [email]);\n\n  // Function to update an existing expense\n  const updateExpense = useCallback(async (id: number) => {\n    try {\n      const response = await fetch(`http://localhost:3000/api/expenses/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          Email: email,\n          Amount: 150,\n          Date: new Date().toISOString(),\n          CategoryName: 'Food',\n          Description: 'Groceries and snacks'\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Error: ${response.statusText}`);\n      }\n      const updatedExpense = await response.json();\n      setExpenses((prevExpenses) => prevExpenses.map(expense => expense.id === id ? updatedExpense : expense));\n    } catch (error) {\n      console.error(\"Error updating expense:\", error);\n    }\n  }, [email]);\n\n  // Function to delete an expense\n  const deleteExpense = useCallback(async (id: number) => {\n    try {\n      const response = await fetch(`http://localhost:3000/api/expenses/${id}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        throw new Error(`Error: ${response.statusText}`);\n      }\n      setExpenses((prevExpenses) => prevExpenses.filter(expense => expense.id !== id));\n    } catch (error) {\n      console.error(\"Error deleting expense:\", error);\n    }\n  }, []);\n\n  // Function to create a new income\n  const createIncome = useCallback(async () => {\n    try {\n      const response = await fetch(`http://localhost:3000/api/incomes`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          Email: email,\n          Amount: 2000,\n          Date: new Date().toISOString(),\n          CategoryName: 'Salary',\n          Description: 'Monthly salary'\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Error: ${response.statusText}`);\n      }\n      const newIncome = await response.json();\n      setIncomes((prevIncomes) => [...prevIncomes, newIncome]);\n    } catch (error) {\n      console.error(\"Error creating income:\", error);\n    }\n  }, [email]);\n\n  // Function to update an existing income\n  const updateIncome = useCallback(async (id: number) => {\n    try {\n      const response = await fetch(`http://localhost:3000/api/incomes/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          Email: email,\n          Amount: 2500,\n          Date: new Date().toISOString(),\n          CategoryName: 'Salary',\n          Description: 'Monthly salary with bonus'\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Error: ${response.statusText}`);\n      }\n      const updatedIncome = await response.json();\n      setIncomes((prevIncomes) => prevIncomes.map(income => income.id === id ? updatedIncome : income));\n    } catch (error) {\n      console.error(\"Error updating income:\", error);\n    }\n  }, [email]);\n\n  // Function to delete an income\n  const deleteIncome = useCallback(async (id: number) => {\n    try {\n      const response = await fetch(`http://localhost:3000/api/incomes/${id}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        throw new Error(`Error: ${response.statusText}`);\n      }\n      setIncomes((prevIncomes) => prevIncomes.filter(income => income.id !== id));\n    } catch (error) {\n      console.error(\"Error deleting income:\", error);\n    }\n  }, []);\n\n  return (\n    <div>\n      <h1>Transactions</h1>\n      <div style={{ display: 'flex', justifyContent: 'space-around' }}>\n        <Expenses expenses={expenses} updateExpense={updateExpense} deleteExpense={deleteExpense} createExpense={createExpense} />\n        <Incomes incomes={incomes} updateIncome={updateIncome} deleteIncome={deleteIncome} createIncome={createIncome} />\n      </div>\n    </div>\n  );\n};\n\n// Expenses component\nconst Expenses: React.FC<{ expenses: Expense[], updateExpense: (id: number) => void, deleteExpense: (id: number) => void, createExpense: () => void }> = ({ expenses, updateExpense, deleteExpense, createExpense }) => (\n  <div>\n    <h2>Expenses</h2>\n    <ul>\n      {expenses.map(expense => (\n        <li key={expense.id}>\n          {expense.date}: {expense.description} - ${expense.amount} (Category: {expense.categoryName})\n          <button onClick={() => updateExpense(expense.id)}>Update</button>\n          <button onClick={() => deleteExpense(expense.id)}>Delete</button>\n        </li>\n      ))}\n    </ul>\n    <button onClick={createExpense}>Create Expense</button>\n  </div>\n);\n\n// Incomes component\nconst Incomes: React.FC<{ incomes: Income[], updateIncome: (id: number) => void, deleteIncome: (id: number) => void, createIncome: () => void }> = ({ incomes, updateIncome, deleteIncome, createIncome }) => (\n  <div>\n    <h2>Incomes</h2>\n    <ul>\n      {incomes.map(income => (\n        <li key={income.id}>\n          {income.date}: {income.description} - ${income.amount} (Category: {income.categoryName})\n          <button onClick={() => updateIncome(income.id)}>Update</button>\n          <button onClick={() => deleteIncome(income.id)}>Delete</button>\n        </li>\n      ))}\n    </ul>\n    <button onClick={createIncome}>Create Income</button>\n  </div>\n);\n\nexport default Transactions;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}