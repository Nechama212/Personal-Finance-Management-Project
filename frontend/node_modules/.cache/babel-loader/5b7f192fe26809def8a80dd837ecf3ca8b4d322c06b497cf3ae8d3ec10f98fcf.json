{"ast":null,"code":"var _jsxFileName = \"/Users/nechama/Downloads/personal_finance_managment/frontend/src/components/MonthlyBudget/MonthlyBudget.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport CategorySelector from './CategorySelector';\nimport BudgetInput from './BudgetInput';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MonthlyBudget = () => {\n  _s();\n  const [userEmail, setUserEmail] = useState('');\n  const [categories, setCategories] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState('');\n  const [monthlyBudgets, setMonthlyBudgets] = useState([]);\n  const [expenses, setExpenses] = useState([]); // Add state for expenses\n\n  useEffect(() => {\n    if (userEmail) {\n      // Fetch expense categories from the expenses table\n      fetch(`/api/expenses/${userEmail}`).then(response => response.json()).then(data => {\n        console.log('Fetched expense categories:', data); // Log the fetched expense categories\n        const categoryNames = [...new Set(data.map(expense => expense.CategoryName.toLowerCase()))]; // Extract unique category names in lowercase\n        console.log('Expense categories:', categoryNames); // Log the expense categories\n        setCategories(categoryNames);\n        setExpenses(data); // Save expenses to state\n      }).catch(error => console.error('Error fetching expense categories:', error));\n\n      // Fetch monthly budgets from the backend\n      fetch(`/api/monthlyBudgets/${userEmail}`).then(response => response.json()).then(data => {\n        console.log('Fetched budgets:', data); // Log the fetched data\n        if (Array.isArray(data)) {\n          setMonthlyBudgets(data);\n        } else {\n          console.error('Error: Data is not an array', data);\n        }\n      }).catch(error => console.error('Error fetching budgets:', error));\n    }\n  }, [userEmail]);\n  const handleCategorySelect = category => {\n    console.log('Selected category:', category); // Log the selected category\n    setSelectedCategory(category.toLowerCase()); // Ensure selected category is in lowercase\n  };\n  const handleBudgetSave = amount => {\n    // Check if the category already exists in the budgets\n    const categoryExists = monthlyBudgets.some(budget => budget.CategoryName.toLowerCase() === selectedCategory);\n    if (categoryExists) {\n      alert('Category already exists in your budgets.');\n      return;\n    }\n\n    // Save budget to the backend\n    const data = {\n      Email: userEmail,\n      CategoryName: selectedCategory,\n      BudgetAmount: parseFloat(amount),\n      SpentAmount: 0,\n      // Initial value\n      BudgetMonth: new Date().toISOString()\n    };\n    console.log('Data sent:', data); // Log the data being sent\n\n    fetch('/api/monthlyBudgets', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    }).then(response => {\n      console.log('Response status:', response.status); // Log the response status\n      if (!response.ok) {\n        return response.json().then(error => {\n          throw new Error(error.error);\n        });\n      }\n      return response.json();\n    }).then(data => {\n      alert('Budget saved successfully!');\n      if (Array.isArray(monthlyBudgets)) {\n        setMonthlyBudgets([...monthlyBudgets, data]);\n      } else {\n        console.error('Error: monthlyBudgets is not an array', monthlyBudgets);\n      }\n    }).catch(error => console.error('Error saving budget:', error));\n  };\n  const handleBudgetDelete = budgetId => {\n    fetch(`/api/monthlyBudgets/${budgetId}`, {\n      method: 'DELETE'\n    }).then(response => {\n      if (response.ok) {\n        setMonthlyBudgets(monthlyBudgets.filter(budget => budget.BudgetID !== budgetId));\n      } else {\n        console.error('Error deleting budget');\n      }\n    }).catch(error => console.error('Error deleting budget:', error));\n  };\n  const calculateSpentAmount = categoryName => {\n    const lowerCategoryName = categoryName.toLowerCase();\n    return expenses.filter(expense => expense.CategoryName.toLowerCase() === lowerCategoryName).reduce((total, expense) => total + expense.Amount, 0); // Sum the Amount from expenses\n  };\n  const isOverBudget = budget => {\n    const spentAmount = calculateSpentAmount(budget.CategoryName);\n    return spentAmount > budget.BudgetAmount;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Monthly Budget\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"email\",\n      placeholder: \"Enter your email\",\n      value: userEmail,\n      onChange: e => setUserEmail(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), userEmail && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(CategorySelector, {\n        categories: [\"Select Category\", ...categories] // Add \"Select Category\" to the dropdown\n        ,\n        onSelect: handleCategorySelect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this), selectedCategory && selectedCategory !== \"Select Category\" && /*#__PURE__*/_jsxDEV(BudgetInput, {\n        onSave: handleBudgetSave\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Your Monthly Budgets\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: Array.isArray(monthlyBudgets) && monthlyBudgets.map((budget, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [new Date(budget.BudgetMonth).toLocaleDateString(), \" - \", budget.CategoryName, \": \\u20AA\", budget.BudgetAmount, \" (Spent: \\u20AA\", calculateSpentAmount(budget.CategoryName), \")\", /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleBudgetDelete(budget.BudgetID),\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 17\n          }, this), \" \", isOverBudget(budget) && /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              color: 'red'\n            },\n            children: \"Over budget!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 19\n          }, this) // Show over budget warning in red\n          ]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n};\n_s(MonthlyBudget, \"Ml8uqbqYxoVaHmotqDtmLAdUagM=\");\n_c = MonthlyBudget;\nexport default MonthlyBudget;\nvar _c;\n$RefreshReg$(_c, \"MonthlyBudget\");","map":{"version":3,"names":["React","useState","useEffect","CategorySelector","BudgetInput","jsxDEV","_jsxDEV","Fragment","_Fragment","MonthlyBudget","_s","userEmail","setUserEmail","categories","setCategories","selectedCategory","setSelectedCategory","monthlyBudgets","setMonthlyBudgets","expenses","setExpenses","fetch","then","response","json","data","console","log","categoryNames","Set","map","expense","CategoryName","toLowerCase","catch","error","Array","isArray","handleCategorySelect","category","handleBudgetSave","amount","categoryExists","some","budget","alert","Email","BudgetAmount","parseFloat","SpentAmount","BudgetMonth","Date","toISOString","method","headers","body","JSON","stringify","status","ok","Error","handleBudgetDelete","budgetId","filter","BudgetID","calculateSpentAmount","categoryName","lowerCategoryName","reduce","total","Amount","isOverBudget","spentAmount","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onSelect","onSave","index","toLocaleDateString","onClick","style","color","_c","$RefreshReg$"],"sources":["/Users/nechama/Downloads/personal_finance_managment/frontend/src/components/MonthlyBudget/MonthlyBudget.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport CategorySelector from './CategorySelector';\nimport BudgetInput from './BudgetInput';\n\nconst MonthlyBudget = () => {\n  const [userEmail, setUserEmail] = useState('');\n  const [categories, setCategories] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState('');\n  const [monthlyBudgets, setMonthlyBudgets] = useState([]);\n  const [expenses, setExpenses] = useState([]); // Add state for expenses\n\n  useEffect(() => {\n    if (userEmail) {\n      // Fetch expense categories from the expenses table\n      fetch(`/api/expenses/${userEmail}`)\n        .then(response => response.json())\n        .then(data => {\n          console.log('Fetched expense categories:', data); // Log the fetched expense categories\n          const categoryNames = [...new Set(data.map(expense => expense.CategoryName.toLowerCase()))]; // Extract unique category names in lowercase\n          console.log('Expense categories:', categoryNames); // Log the expense categories\n          setCategories(categoryNames);\n          setExpenses(data); // Save expenses to state\n        })\n        .catch(error => console.error('Error fetching expense categories:', error));\n\n      // Fetch monthly budgets from the backend\n      fetch(`/api/monthlyBudgets/${userEmail}`)\n        .then(response => response.json())\n        .then(data => {\n          console.log('Fetched budgets:', data); // Log the fetched data\n          if (Array.isArray(data)) {\n            setMonthlyBudgets(data);\n          } else {\n            console.error('Error: Data is not an array', data);\n          }\n        })\n        .catch(error => console.error('Error fetching budgets:', error));\n    }\n  }, [userEmail]);\n\n  const handleCategorySelect = (category) => {\n    console.log('Selected category:', category); // Log the selected category\n    setSelectedCategory(category.toLowerCase()); // Ensure selected category is in lowercase\n  };\n\n  const handleBudgetSave = (amount) => {\n    // Check if the category already exists in the budgets\n    const categoryExists = monthlyBudgets.some(budget => budget.CategoryName.toLowerCase() === selectedCategory);\n    if (categoryExists) {\n      alert('Category already exists in your budgets.');\n      return;\n    }\n\n    // Save budget to the backend\n    const data = {\n      Email: userEmail,\n      CategoryName: selectedCategory,\n      BudgetAmount: parseFloat(amount),\n      SpentAmount: 0, // Initial value\n      BudgetMonth: new Date().toISOString()\n    };\n\n    console.log('Data sent:', data); // Log the data being sent\n\n    fetch('/api/monthlyBudgets', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data),\n    })\n      .then(response => {\n        console.log('Response status:', response.status); // Log the response status\n        if (!response.ok) {\n          return response.json().then(error => { throw new Error(error.error) });\n        }\n        return response.json();\n      })\n      .then(data => {\n        alert('Budget saved successfully!');\n        if (Array.isArray(monthlyBudgets)) {\n          setMonthlyBudgets([...monthlyBudgets, data]);\n        } else {\n          console.error('Error: monthlyBudgets is not an array', monthlyBudgets);\n        }\n      })\n      .catch(error => console.error('Error saving budget:', error));\n  };\n\n  const handleBudgetDelete = (budgetId) => {\n    fetch(`/api/monthlyBudgets/${budgetId}`, {\n      method: 'DELETE',\n    })\n      .then(response => {\n        if (response.ok) {\n          setMonthlyBudgets(monthlyBudgets.filter(budget => budget.BudgetID !== budgetId));\n        } else {\n          console.error('Error deleting budget');\n        }\n      })\n      .catch(error => console.error('Error deleting budget:', error));\n  };\n\n  const calculateSpentAmount = (categoryName) => {\n    const lowerCategoryName = categoryName.toLowerCase();\n    return expenses\n      .filter(expense => expense.CategoryName.toLowerCase() === lowerCategoryName)\n      .reduce((total, expense) => total + expense.Amount, 0); // Sum the Amount from expenses\n  };\n\n  const isOverBudget = (budget) => {\n    const spentAmount = calculateSpentAmount(budget.CategoryName);\n    return spentAmount > budget.BudgetAmount;\n  };\n\n  return (\n    <div>\n      <h2>Monthly Budget</h2>\n      <input \n        type=\"email\" \n        placeholder=\"Enter your email\"\n        value={userEmail}\n        onChange={(e) => setUserEmail(e.target.value)} \n      />\n      {userEmail && (\n        <>\n          <CategorySelector \n            categories={[\"Select Category\", ...categories]} // Add \"Select Category\" to the dropdown\n            onSelect={handleCategorySelect} \n          />\n          {selectedCategory && selectedCategory !== \"Select Category\" && (\n            <BudgetInput onSave={handleBudgetSave} />\n          )}\n          \n          <h3>Your Monthly Budgets</h3>\n          <ul>\n            {Array.isArray(monthlyBudgets) && monthlyBudgets.map((budget, index) => (\n              <li key={index}>\n                {new Date(budget.BudgetMonth).toLocaleDateString()} - {budget.CategoryName}: ₪{budget.BudgetAmount} (Spent: ₪{calculateSpentAmount(budget.CategoryName)})\n                <button onClick={() => handleBudgetDelete(budget.BudgetID)}>Delete</button> {/* Add delete button */}\n                {isOverBudget(budget) && (\n                  <p style={{ color: 'red' }}>Over budget!</p> // Show over budget warning in red\n                )}\n              </li>\n            ))}\n          </ul>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default MonthlyBudget;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}