{"ast":null,"code":"var _jsxFileName = \"/Users/nechama/Downloads/personal_finance_managment/frontend/src/components/UploadExcel/UploadExpenses.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport * as XLSX from 'xlsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UploadExpenses = ({\n  userEmail,\n  createExpense\n}) => {\n  _s();\n  const [error, setError] = useState(null);\n\n  // Convert Excel date serial number to a JavaScript Date object\n  const convertExcelDateToJSDate = excelDate => {\n    const epoch = new Date(1899, 11, 31); // 31 Dec 1899 (Excel's epoch date)\n    epoch.setDate(epoch.getDate() + excelDate);\n    return epoch;\n  };\n\n  // Handle file upload\n  const handleFileUpload = async e => {\n    var _e$target$files;\n    const file = (_e$target$files = e.target.files) === null || _e$target$files === void 0 ? void 0 : _e$target$files[0];\n    if (!file) {\n      setError('No file selected.');\n      return;\n    }\n    const reader = new FileReader();\n    reader.onload = event => {\n      var _event$target;\n      const data = new Uint8Array((_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.result);\n      const workbook = XLSX.read(data, {\n        type: 'array'\n      });\n      const sheetName = workbook.SheetNames[0];\n      const sheet = workbook.Sheets[sheetName];\n      const jsonData = XLSX.utils.sheet_to_json(sheet);\n      console.log('Data from file:', jsonData); // Add this line to debug the file data\n\n      try {\n        const expenses = jsonData.map((row, index) => {\n          console.log(`Processing row ${index + 1}:`, row); // Add this line to debug each row\n\n          // Validate required fields\n          if (!row.Description || !row.Amount || !row.Date || !row.CategoryName) {\n            throw new Error(`Missing required fields in row ${index + 1}.`);\n          }\n\n          // Convert Excel serial date to JavaScript Date if necessary\n          let date = row.Date;\n          if (typeof date === 'number') {\n            date = convertExcelDateToJSDate(date).toISOString().split('T')[0];\n          } else if (typeof date === 'string') {\n            date = new Date(date).toISOString().split('T')[0]; // Ensure \"yyyy-MM-dd\" format\n          }\n          console.log(`Processed row ${index + 1}:`, {\n            Description: row.Description,\n            Amount: row.Amount,\n            Date: date,\n            CategoryName: row.CategoryName,\n            UserEmail: userEmail\n          });\n          return {\n            Description: row.Description,\n            Amount: parseFloat(row.Amount.toString()),\n            Date: date,\n            CategoryName: row.CategoryName,\n            UserEmail: userEmail // Use provided email\n          };\n        });\n\n        // Upload each expense\n        expenses.forEach(createExpense);\n        setError(null); // Clear errors on success\n      } catch (error) {\n        console.error('Error processing file:', error); // Add this line to see the error details\n        setError('Error processing file. Please check the format.');\n      }\n    };\n    reader.readAsArrayBuffer(file);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Upload Expenses\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".xlsx, .xls\",\n      onChange: handleFileUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n_s(UploadExpenses, \"A8i/78Fx3FIozbyR2zwnz0NK35o=\");\n_c = UploadExpenses;\nexport default UploadExpenses;\nvar _c;\n$RefreshReg$(_c, \"UploadExpenses\");","map":{"version":3,"names":["React","useState","XLSX","jsxDEV","_jsxDEV","UploadExpenses","userEmail","createExpense","_s","error","setError","convertExcelDateToJSDate","excelDate","epoch","Date","setDate","getDate","handleFileUpload","e","_e$target$files","file","target","files","reader","FileReader","onload","event","_event$target","data","Uint8Array","result","workbook","read","type","sheetName","SheetNames","sheet","Sheets","jsonData","utils","sheet_to_json","console","log","expenses","map","row","index","Description","Amount","CategoryName","Error","date","toISOString","split","UserEmail","parseFloat","toString","forEach","readAsArrayBuffer","children","fileName","_jsxFileName","lineNumber","columnNumber","accept","onChange","style","color","_c","$RefreshReg$"],"sources":["/Users/nechama/Downloads/personal_finance_managment/frontend/src/components/UploadExcel/UploadExpenses.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport * as XLSX from 'xlsx';\nimport { Expense } from '../Transactions/TransactionsTypes';\n\ninterface UploadExpensesProps {\n  userEmail: string;\n  createExpense: (newExpense: Omit<Expense, 'ExpenseID'>) => void;\n}\n\ninterface RowData {\n  Description: string;\n  Amount: number;\n  Date: string | number; // Date can be string or number (Excel date serial)\n  CategoryName: string;\n}\n\nconst UploadExpenses: React.FC<UploadExpensesProps> = ({ userEmail, createExpense }) => {\n  const [error, setError] = useState<string | null>(null);\n\n  // Convert Excel date serial number to a JavaScript Date object\n  const convertExcelDateToJSDate = (excelDate: number) => {\n    const epoch = new Date(1899, 11, 31); // 31 Dec 1899 (Excel's epoch date)\n    epoch.setDate(epoch.getDate() + excelDate);\n    return epoch;\n  };\n\n  // Handle file upload\n  const handleFileUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (!file) {\n      setError('No file selected.');\n      return;\n    }\n\n    const reader = new FileReader();\n\n    reader.onload = (event) => {\n      const data = new Uint8Array(event.target?.result as ArrayBuffer);\n      const workbook = XLSX.read(data, { type: 'array' });\n      const sheetName = workbook.SheetNames[0];\n      const sheet = workbook.Sheets[sheetName];\n      const jsonData = XLSX.utils.sheet_to_json(sheet);\n\n      console.log('Data from file:', jsonData); // Add this line to debug the file data\n\n      try {\n        const expenses: Omit<Expense, 'ExpenseID'>[] = (jsonData as RowData[]).map((row, index) => {\n          console.log(`Processing row ${index + 1}:`, row); // Add this line to debug each row\n\n          // Validate required fields\n          if (!row.Description || !row.Amount || !row.Date || !row.CategoryName) {\n            throw new Error(`Missing required fields in row ${index + 1}.`);\n          }\n\n          // Convert Excel serial date to JavaScript Date if necessary\n          let date = row.Date;\n          if (typeof date === 'number') {\n            date = convertExcelDateToJSDate(date).toISOString().split('T')[0];\n          } else if (typeof date === 'string') {\n            date = new Date(date).toISOString().split('T')[0]; // Ensure \"yyyy-MM-dd\" format\n          }\n\n          console.log(`Processed row ${index + 1}:`, {\n            Description: row.Description,\n            Amount: row.Amount,\n            Date: date,\n            CategoryName: row.CategoryName,\n            UserEmail: userEmail,\n          });\n\n          return {\n            Description: row.Description,\n            Amount: parseFloat(row.Amount.toString()),\n            Date: date,\n            CategoryName: row.CategoryName,\n            UserEmail: userEmail, // Use provided email\n          };\n        });\n\n        // Upload each expense\n        expenses.forEach(createExpense);\n        setError(null); // Clear errors on success\n      } catch (error) {\n        console.error('Error processing file:', error); // Add this line to see the error details\n        setError('Error processing file. Please check the format.');\n      }\n    };\n\n    reader.readAsArrayBuffer(file);\n  };\n\n  return (\n    <div>\n      <h3>Upload Expenses</h3>\n      <input type=\"file\" accept=\".xlsx, .xls\" onChange={handleFileUpload} />\n      {error && <p style={{ color: 'red' }}>{error}</p>}\n    </div>\n  );\n};\n\nexport default UploadExpenses;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,KAAKC,IAAI,MAAM,MAAM;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAe7B,MAAMC,cAA6C,GAAGA,CAAC;EAAEC,SAAS;EAAEC;AAAc,CAAC,KAAK;EAAAC,EAAA;EACtF,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAgB,IAAI,CAAC;;EAEvD;EACA,MAAMU,wBAAwB,GAAIC,SAAiB,IAAK;IACtD,MAAMC,KAAK,GAAG,IAAIC,IAAI,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;IACtCD,KAAK,CAACE,OAAO,CAACF,KAAK,CAACG,OAAO,CAAC,CAAC,GAAGJ,SAAS,CAAC;IAC1C,OAAOC,KAAK;EACd,CAAC;;EAED;EACA,MAAMI,gBAAgB,GAAG,MAAOC,CAAsC,IAAK;IAAA,IAAAC,eAAA;IACzE,MAAMC,IAAI,IAAAD,eAAA,GAAGD,CAAC,CAACG,MAAM,CAACC,KAAK,cAAAH,eAAA,uBAAdA,eAAA,CAAiB,CAAC,CAAC;IAChC,IAAI,CAACC,IAAI,EAAE;MACTV,QAAQ,CAAC,mBAAmB,CAAC;MAC7B;IACF;IAEA,MAAMa,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;IAE/BD,MAAM,CAACE,MAAM,GAAIC,KAAK,IAAK;MAAA,IAAAC,aAAA;MACzB,MAAMC,IAAI,GAAG,IAAIC,UAAU,EAAAF,aAAA,GAACD,KAAK,CAACL,MAAM,cAAAM,aAAA,uBAAZA,aAAA,CAAcG,MAAqB,CAAC;MAChE,MAAMC,QAAQ,GAAG7B,IAAI,CAAC8B,IAAI,CAACJ,IAAI,EAAE;QAAEK,IAAI,EAAE;MAAQ,CAAC,CAAC;MACnD,MAAMC,SAAS,GAAGH,QAAQ,CAACI,UAAU,CAAC,CAAC,CAAC;MACxC,MAAMC,KAAK,GAAGL,QAAQ,CAACM,MAAM,CAACH,SAAS,CAAC;MACxC,MAAMI,QAAQ,GAAGpC,IAAI,CAACqC,KAAK,CAACC,aAAa,CAACJ,KAAK,CAAC;MAEhDK,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEJ,QAAQ,CAAC,CAAC,CAAC;;MAE1C,IAAI;QACF,MAAMK,QAAsC,GAAIL,QAAQ,CAAeM,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,KAAK;UACzFL,OAAO,CAACC,GAAG,CAAC,kBAAkBI,KAAK,GAAG,CAAC,GAAG,EAAED,GAAG,CAAC,CAAC,CAAC;;UAElD;UACA,IAAI,CAACA,GAAG,CAACE,WAAW,IAAI,CAACF,GAAG,CAACG,MAAM,IAAI,CAACH,GAAG,CAAC/B,IAAI,IAAI,CAAC+B,GAAG,CAACI,YAAY,EAAE;YACrE,MAAM,IAAIC,KAAK,CAAC,kCAAkCJ,KAAK,GAAG,CAAC,GAAG,CAAC;UACjE;;UAEA;UACA,IAAIK,IAAI,GAAGN,GAAG,CAAC/B,IAAI;UACnB,IAAI,OAAOqC,IAAI,KAAK,QAAQ,EAAE;YAC5BA,IAAI,GAAGxC,wBAAwB,CAACwC,IAAI,CAAC,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;UACnE,CAAC,MAAM,IAAI,OAAOF,IAAI,KAAK,QAAQ,EAAE;YACnCA,IAAI,GAAG,IAAIrC,IAAI,CAACqC,IAAI,CAAC,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UACrD;UAEAZ,OAAO,CAACC,GAAG,CAAC,iBAAiBI,KAAK,GAAG,CAAC,GAAG,EAAE;YACzCC,WAAW,EAAEF,GAAG,CAACE,WAAW;YAC5BC,MAAM,EAAEH,GAAG,CAACG,MAAM;YAClBlC,IAAI,EAAEqC,IAAI;YACVF,YAAY,EAAEJ,GAAG,CAACI,YAAY;YAC9BK,SAAS,EAAEhD;UACb,CAAC,CAAC;UAEF,OAAO;YACLyC,WAAW,EAAEF,GAAG,CAACE,WAAW;YAC5BC,MAAM,EAAEO,UAAU,CAACV,GAAG,CAACG,MAAM,CAACQ,QAAQ,CAAC,CAAC,CAAC;YACzC1C,IAAI,EAAEqC,IAAI;YACVF,YAAY,EAAEJ,GAAG,CAACI,YAAY;YAC9BK,SAAS,EAAEhD,SAAS,CAAE;UACxB,CAAC;QACH,CAAC,CAAC;;QAEF;QACAqC,QAAQ,CAACc,OAAO,CAAClD,aAAa,CAAC;QAC/BG,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;MAClB,CAAC,CAAC,OAAOD,KAAK,EAAE;QACdgC,OAAO,CAAChC,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC,CAAC,CAAC;QAChDC,QAAQ,CAAC,iDAAiD,CAAC;MAC7D;IACF,CAAC;IAEDa,MAAM,CAACmC,iBAAiB,CAACtC,IAAI,CAAC;EAChC,CAAC;EAED,oBACEhB,OAAA;IAAAuD,QAAA,gBACEvD,OAAA;MAAAuD,QAAA,EAAI;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACxB3D,OAAA;MAAO6B,IAAI,EAAC,MAAM;MAAC+B,MAAM,EAAC,aAAa;MAACC,QAAQ,EAAEhD;IAAiB;MAAA2C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EACrEtD,KAAK,iBAAIL,OAAA;MAAG8D,KAAK,EAAE;QAAEC,KAAK,EAAE;MAAM,CAAE;MAAAR,QAAA,EAAElD;IAAK;MAAAmD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9C,CAAC;AAEV,CAAC;AAACvD,EAAA,CAlFIH,cAA6C;AAAA+D,EAAA,GAA7C/D,cAA6C;AAoFnD,eAAeA,cAAc;AAAC,IAAA+D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}