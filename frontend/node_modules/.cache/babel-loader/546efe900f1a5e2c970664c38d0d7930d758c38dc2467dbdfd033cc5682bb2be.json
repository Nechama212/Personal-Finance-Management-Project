{"ast":null,"code":"var _jsxFileName = \"/Users/nechama/Downloads/personal_finance_managment/frontend/src/components/Transactions.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Expenses from './Expenses';\nimport Incomes from './Incomes';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Transactions = () => {\n  _s();\n  const [expenses, setExpenses] = useState([]);\n  const [incomes, setIncomes] = useState([]);\n  const email = \"example@example.com\"; // ניתן לשנות למייל המשתמש המחובר\n\n  useEffect(() => {\n    const fetchExpenses = async () => {\n      try {\n        const response = await fetch(`/api/expenses/${email}`);\n        const data = await response.json();\n        console.log(\"Fetched Expenses:\", data);\n        setExpenses(data);\n      } catch (error) {\n        console.error(\"Error fetching expenses:\", error);\n      }\n    };\n    const fetchIncomes = async () => {\n      try {\n        const response = await fetch(`/api/incomes/${email}`);\n        const data = await response.json();\n        console.log(\"Fetched Incomes:\", data);\n        setIncomes(data);\n      } catch (error) {\n        console.error(\"Error fetching incomes:\", error);\n      }\n    };\n    fetchExpenses();\n    fetchIncomes();\n  }, [email]);\n  const updateExpense = async expense => {\n    try {\n      const completeExpense = {\n        ...expense,\n        Email: email // Add email field\n      };\n      const response = await fetch(`/api/expenses/${completeExpense.ExpenseID}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(completeExpense)\n      });\n      const updatedExpense = await response.json();\n      setExpenses(expenses.map(e => e.ExpenseID === updatedExpense.ExpenseID ? updatedExpense : e));\n    } catch (error) {\n      console.error(\"Error updating expense:\", error);\n    }\n  };\n  const deleteExpense = async id => {\n    try {\n      await fetch(`/api/expenses/${id}`, {\n        method: 'DELETE'\n      });\n      setExpenses(expenses.filter(e => e.ExpenseID !== id));\n    } catch (error) {\n      console.error(\"Error deleting expense:\", error);\n    }\n  };\n  const createExpense = async newExpense => {\n    try {\n      console.log(\"New Expense Data:\", newExpense);\n      if (!newExpense.Date || isNaN(new Date(newExpense.Date).getTime())) {\n        throw new RangeError(\"Invalid time value\");\n      }\n      const completeExpense = {\n        ...newExpense,\n        Email: email,\n        // Add email field\n        Amount: parseFloat(newExpense.Amount),\n        // Ensure amount is a number\n        Date: new Date(newExpense.Date).toISOString() // Update date format to ISO-8601\n      };\n      console.log(\"Creating expense:\", completeExpense);\n      const response = await fetch('/api/expenses', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(completeExpense)\n      });\n      if (!response.ok) {\n        const errorMessage = await response.text();\n        console.error(\"Error creating expense:\", errorMessage);\n        return;\n      }\n      const createdExpense = await response.json();\n      console.log(\"Created Expense:\", createdExpense);\n      setExpenses([...expenses, createdExpense]);\n    } catch (error) {\n      console.error(\"Error creating expense:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Transactions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Logged in as: \", email]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'space-around'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Expenses, {\n        expenses: expenses,\n        updateExpense: updateExpense,\n        deleteExpense: deleteExpense,\n        createExpense: createExpense\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Incomes, {\n        incomes: incomes,\n        updateIncome: updateIncome,\n        deleteIncome: deleteIncome,\n        createIncome: createIncome\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n};\n_s(Transactions, \"7/qE6LQ1g13AuGgT57tTE8qiysE=\");\n_c = Transactions;\nexport default Transactions;\nvar _c;\n$RefreshReg$(_c, \"Transactions\");","map":{"version":3,"names":["React","useState","useEffect","Expenses","Incomes","jsxDEV","_jsxDEV","Transactions","_s","expenses","setExpenses","incomes","setIncomes","email","fetchExpenses","response","fetch","data","json","console","log","error","fetchIncomes","updateExpense","expense","completeExpense","Email","ExpenseID","method","headers","body","JSON","stringify","updatedExpense","map","e","deleteExpense","id","filter","createExpense","newExpense","Date","isNaN","getTime","RangeError","Amount","parseFloat","toISOString","ok","errorMessage","text","createdExpense","children","fileName","_jsxFileName","lineNumber","columnNumber","style","display","justifyContent","updateIncome","deleteIncome","createIncome","_c","$RefreshReg$"],"sources":["/Users/nechama/Downloads/personal_finance_managment/frontend/src/components/Transactions.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Expenses from './Expenses';\nimport Incomes from './Incomes';\n\ninterface Expense {\n  ExpenseID: number;\n  Description: string;\n  Amount: number;\n  Date: string;\n  CategoryName: string;\n}\n\ninterface Income {\n  IncomeID: number;\n  Description: string;\n  Amount: number;\n  Date: string;\n  CategoryName: string;\n}\n\nconst Transactions: React.FC = () => {\n  const [expenses, setExpenses] = useState<Expense[]>([]);\n  const [incomes, setIncomes] = useState<Income[]>([]);\n  const email = \"example@example.com\"; // ניתן לשנות למייל המשתמש המחובר\n\n  useEffect(() => {\n    const fetchExpenses = async () => {\n      try {\n        const response = await fetch(`/api/expenses/${email}`);\n        const data = await response.json();\n        console.log(\"Fetched Expenses:\", data);\n        setExpenses(data);\n      } catch (error) {\n        console.error(\"Error fetching expenses:\", error);\n      }\n    };\n\n    const fetchIncomes = async () => {\n      try {\n        const response = await fetch(`/api/incomes/${email}`);\n        const data = await response.json();\n        console.log(\"Fetched Incomes:\", data);\n        setIncomes(data);\n      } catch (error) {\n        console.error(\"Error fetching incomes:\", error);\n      }\n    };\n\n    fetchExpenses();\n    fetchIncomes();\n  }, [email]);\n\n  const updateExpense = async (expense: Expense) => {\n    try {\n      const completeExpense = {\n        ...expense,\n        Email: email, // Add email field\n      };\n\n      const response = await fetch(`/api/expenses/${completeExpense.ExpenseID}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(completeExpense),\n      });\n      const updatedExpense = await response.json();\n      setExpenses(expenses.map(e => (e.ExpenseID === updatedExpense.ExpenseID ? updatedExpense : e)));\n    } catch (error) {\n      console.error(\"Error updating expense:\", error);\n    }\n  };\n\n  const deleteExpense = async (id: number) => {\n    try {\n      await fetch(`/api/expenses/${id}`, {\n        method: 'DELETE',\n      });\n      setExpenses(expenses.filter(e => e.ExpenseID !== id));\n    } catch (error) {\n      console.error(\"Error deleting expense:\", error);\n    }\n  };\n\n  const createExpense = async (newExpense: Omit<Expense, 'ExpenseID'>) => {\n    try {\n      console.log(\"New Expense Data:\", newExpense);\n      if (!newExpense.Date || isNaN(new Date(newExpense.Date).getTime())) {\n        throw new RangeError(\"Invalid time value\");\n      }\n\n      const completeExpense = {\n        ...newExpense,\n        Email: email, // Add email field\n        Amount: parseFloat(newExpense.Amount as any), // Ensure amount is a number\n        Date: new Date(newExpense.Date).toISOString(), // Update date format to ISO-8601\n      };\n\n      console.log(\"Creating expense:\", completeExpense);\n\n      const response = await fetch('/api/expenses', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(completeExpense),\n      });\n\n      if (!response.ok) {\n        const errorMessage = await response.text();\n        console.error(\"Error creating expense:\", errorMessage);\n        return;\n      }\n\n      const createdExpense = await response.json();\n      console.log(\"Created Expense:\", createdExpense);\n      setExpenses([...expenses, createdExpense]);\n    } catch (error) {\n      console.error(\"Error creating expense:\", error);\n    }\n  };\n\n  return (\n    <div>\n      <h1>Transactions</h1>\n      <p>Logged in as: {email}</p> {/* להציג את כתובת המייל */}\n      <div style={{ display: 'flex', justifyContent: 'space-around' }}>\n        <Expenses\n          expenses={expenses}\n          updateExpense={updateExpense}\n          deleteExpense={deleteExpense}\n          createExpense={createExpense}\n        />\n        <Incomes\n          incomes={incomes}\n          updateIncome={updateIncome}\n          deleteIncome={deleteIncome}\n          createIncome={createIncome}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Transactions;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,OAAO,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAkBhC,MAAMC,YAAsB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAY,EAAE,CAAC;EACvD,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAW,EAAE,CAAC;EACpD,MAAMY,KAAK,GAAG,qBAAqB,CAAC,CAAC;;EAErCX,SAAS,CAAC,MAAM;IACd,MAAMY,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iBAAiBH,KAAK,EAAE,CAAC;QACtD,MAAMI,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAClCC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEH,IAAI,CAAC;QACtCP,WAAW,CAACO,IAAI,CAAC;MACnB,CAAC,CAAC,OAAOI,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAClD;IACF,CAAC;IAED,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/B,IAAI;QACF,MAAMP,QAAQ,GAAG,MAAMC,KAAK,CAAC,gBAAgBH,KAAK,EAAE,CAAC;QACrD,MAAMI,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAClCC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEH,IAAI,CAAC;QACrCL,UAAU,CAACK,IAAI,CAAC;MAClB,CAAC,CAAC,OAAOI,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACjD;IACF,CAAC;IAEDP,aAAa,CAAC,CAAC;IACfQ,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,CAACT,KAAK,CAAC,CAAC;EAEX,MAAMU,aAAa,GAAG,MAAOC,OAAgB,IAAK;IAChD,IAAI;MACF,MAAMC,eAAe,GAAG;QACtB,GAAGD,OAAO;QACVE,KAAK,EAAEb,KAAK,CAAE;MAChB,CAAC;MAED,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,iBAAiBS,eAAe,CAACE,SAAS,EAAE,EAAE;QACzEC,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,eAAe;MACtC,CAAC,CAAC;MACF,MAAMQ,cAAc,GAAG,MAAMlB,QAAQ,CAACG,IAAI,CAAC,CAAC;MAC5CR,WAAW,CAACD,QAAQ,CAACyB,GAAG,CAACC,CAAC,IAAKA,CAAC,CAACR,SAAS,KAAKM,cAAc,CAACN,SAAS,GAAGM,cAAc,GAAGE,CAAE,CAAC,CAAC;IACjG,CAAC,CAAC,OAAOd,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IACjD;EACF,CAAC;EAED,MAAMe,aAAa,GAAG,MAAOC,EAAU,IAAK;IAC1C,IAAI;MACF,MAAMrB,KAAK,CAAC,iBAAiBqB,EAAE,EAAE,EAAE;QACjCT,MAAM,EAAE;MACV,CAAC,CAAC;MACFlB,WAAW,CAACD,QAAQ,CAAC6B,MAAM,CAACH,CAAC,IAAIA,CAAC,CAACR,SAAS,KAAKU,EAAE,CAAC,CAAC;IACvD,CAAC,CAAC,OAAOhB,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IACjD;EACF,CAAC;EAED,MAAMkB,aAAa,GAAG,MAAOC,UAAsC,IAAK;IACtE,IAAI;MACFrB,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEoB,UAAU,CAAC;MAC5C,IAAI,CAACA,UAAU,CAACC,IAAI,IAAIC,KAAK,CAAC,IAAID,IAAI,CAACD,UAAU,CAACC,IAAI,CAAC,CAACE,OAAO,CAAC,CAAC,CAAC,EAAE;QAClE,MAAM,IAAIC,UAAU,CAAC,oBAAoB,CAAC;MAC5C;MAEA,MAAMnB,eAAe,GAAG;QACtB,GAAGe,UAAU;QACbd,KAAK,EAAEb,KAAK;QAAE;QACdgC,MAAM,EAAEC,UAAU,CAACN,UAAU,CAACK,MAAa,CAAC;QAAE;QAC9CJ,IAAI,EAAE,IAAIA,IAAI,CAACD,UAAU,CAACC,IAAI,CAAC,CAACM,WAAW,CAAC,CAAC,CAAE;MACjD,CAAC;MAED5B,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEK,eAAe,CAAC;MAEjD,MAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAC,eAAe,EAAE;QAC5CY,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,eAAe;MACtC,CAAC,CAAC;MAEF,IAAI,CAACV,QAAQ,CAACiC,EAAE,EAAE;QAChB,MAAMC,YAAY,GAAG,MAAMlC,QAAQ,CAACmC,IAAI,CAAC,CAAC;QAC1C/B,OAAO,CAACE,KAAK,CAAC,yBAAyB,EAAE4B,YAAY,CAAC;QACtD;MACF;MAEA,MAAME,cAAc,GAAG,MAAMpC,QAAQ,CAACG,IAAI,CAAC,CAAC;MAC5CC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAE+B,cAAc,CAAC;MAC/CzC,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAE0C,cAAc,CAAC,CAAC;IAC5C,CAAC,CAAC,OAAO9B,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IACjD;EACF,CAAC;EAED,oBACEf,OAAA;IAAA8C,QAAA,gBACE9C,OAAA;MAAA8C,QAAA,EAAI;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrBlD,OAAA;MAAA8C,QAAA,GAAG,gBAAc,EAACvC,KAAK;IAAA;MAAAwC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,KAAC,eAC7BlD,OAAA;MAAKmD,KAAK,EAAE;QAAEC,OAAO,EAAE,MAAM;QAAEC,cAAc,EAAE;MAAe,CAAE;MAAAP,QAAA,gBAC9D9C,OAAA,CAACH,QAAQ;QACPM,QAAQ,EAAEA,QAAS;QACnBc,aAAa,EAAEA,aAAc;QAC7Ba,aAAa,EAAEA,aAAc;QAC7BG,aAAa,EAAEA;MAAc;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9B,CAAC,eACFlD,OAAA,CAACF,OAAO;QACNO,OAAO,EAAEA,OAAQ;QACjBiD,YAAY,EAAEA,YAAa;QAC3BC,YAAY,EAAEA,YAAa;QAC3BC,YAAY,EAAEA;MAAa;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5B,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAChD,EAAA,CA1HID,YAAsB;AAAAwD,EAAA,GAAtBxD,YAAsB;AA4H5B,eAAeA,YAAY;AAAC,IAAAwD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}