{"ast":null,"code":"var _jsxFileName = \"/Users/nechama/Downloads/personal_finance_managment/frontend/src/components/UploadExcel/UploadExpenses.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UploadExpenses = ({\n  userEmail,\n  createExpense\n}) => {\n  _s();\n  const [file, setFile] = useState(null); // Store the selected file\n  const [uploading, setUploading] = useState(false); // Track upload state\n  const [error, setError] = useState(null); // Store error message\n  const [success, setSuccess] = useState(null); // Store success message\n\n  // Handle file selection\n  const handleFileChange = e => {\n    const file = e.target.files ? e.target.files[0] : null;\n    setFile(file);\n    setError(null); // Reset error when a new file is selected\n  };\n\n  // Handle the upload process\n  const handleUpload = async () => {\n    if (!file) {\n      setError('Please select a file before uploading');\n      return;\n    }\n    const formData = new FormData();\n    formData.append('file', file);\n    setUploading(true); // Show uploading state\n    setSuccess(null);\n    setError(null);\n    try {\n      const response = await fetch(`/api/expenses/upload-expenses`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${userEmail}` // Include user email for authorization\n        },\n        body: formData\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        setError('Error uploading file: ' + errorText);\n        return;\n      }\n      setSuccess('File uploaded successfully');\n\n      // Fetch the expenses after upload\n      const parsedExpenses = await response.json();\n\n      // Add the parsed expenses to the table\n      parsedExpenses.forEach(expense => {\n        createExpense(expense); // Calling the function passed as a prop to insert expense into the table\n      });\n    } catch (error) {\n      setError('Error uploading file: ' + error); // Handle network errors\n    } finally {\n      setUploading(false); // Hide uploading state\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Upload Expenses from Excel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".xlsx, .xls, .csv\",\n      onChange: handleFileChange // Trigger file selection\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }, this), \" \", success && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'green'\n      },\n      children: success\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 19\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUpload,\n      disabled: !file || uploading // Disable button if no file or if uploading is in progress\n      ,\n      children: [uploading ? 'Uploading...' : 'Upload', \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_s(UploadExpenses, \"K+caEbSpxCUPf5fDaHUrOyVjYeo=\");\n_c = UploadExpenses;\nexport default UploadExpenses;\nvar _c;\n$RefreshReg$(_c, \"UploadExpenses\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","UploadExpenses","userEmail","createExpense","_s","file","setFile","uploading","setUploading","error","setError","success","setSuccess","handleFileChange","e","target","files","handleUpload","formData","FormData","append","response","fetch","method","headers","body","ok","errorText","text","parsedExpenses","json","forEach","expense","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","style","color","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/nechama/Downloads/personal_finance_managment/frontend/src/components/UploadExcel/UploadExpenses.tsx"],"sourcesContent":["import React, { useState } from 'react';\n\ninterface UploadExpensesProps {\n  userEmail: string;\n  createExpense: (newExpense: Omit<Expense, 'ExpenseID'>) => void;\n}\n\nconst UploadExpenses: React.FC<UploadExpensesProps> = ({ userEmail, createExpense }) => {\n  const [file, setFile] = useState<File | null>(null); // Store the selected file\n  const [uploading, setUploading] = useState<boolean>(false); // Track upload state\n  const [error, setError] = useState<string | null>(null); // Store error message\n  const [success, setSuccess] = useState<string | null>(null); // Store success message\n\n  // Handle file selection\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files ? e.target.files[0] : null;\n    setFile(file);\n    setError(null); // Reset error when a new file is selected\n  };\n\n  // Handle the upload process\n  const handleUpload = async () => {\n    if (!file) {\n      setError('Please select a file before uploading');\n      return;\n    }\n    \n    const formData = new FormData();\n    formData.append('file', file);\n    \n    setUploading(true); // Show uploading state\n    setSuccess(null);\n    setError(null);\n    \n    try {\n      const response = await fetch(`/api/expenses/upload-expenses`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${userEmail}`, // Include user email for authorization\n        },\n        body: formData\n      });\n      \n      if (!response.ok) {\n        const errorText = await response.text();\n        setError('Error uploading file: ' + errorText);\n        return;\n      }\n      \n      setSuccess('File uploaded successfully');\n      \n      // Fetch the expenses after upload\n      const parsedExpenses = await response.json();\n      \n      // Add the parsed expenses to the table\n      parsedExpenses.forEach((expense: Expense) => {\n        createExpense(expense); // Calling the function passed as a prop to insert expense into the table\n      });\n      \n    } catch (error) {\n      setError('Error uploading file: ' + error); // Handle network errors\n    } finally {\n      setUploading(false); // Hide uploading state\n    }\n  };\n\n  return (\n    <div>\n      <h3>Upload Expenses from Excel</h3>\n      \n      <input \n        type=\"file\" \n        accept=\".xlsx, .xls, .csv\" \n        onChange={handleFileChange} // Trigger file selection\n      />\n      \n      {error && <div style={{ color: 'red' }}>{error}</div>} {/* Display error if any */}\n      {success && <div style={{ color: 'green' }}>{success}</div>} {/* Display success message */}\n      \n      <button \n        onClick={handleUpload} \n        disabled={!file || uploading} // Disable button if no file or if uploading is in progress\n      >\n        {uploading ? 'Uploading...' : 'Upload'} {/* Show uploading text if in progress */}\n      </button>\n    </div>\n  );\n};\n\nexport default UploadExpenses;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}