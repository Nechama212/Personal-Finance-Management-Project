{"ast":null,"code":"var _jsxFileName = \"/Users/nechama/Downloads/personal_finance_managment/frontend/src/components/Analytics/Analytics.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport ExpensesSummary from './ExpensesSummary';\nimport IncomesSummary from './IncomesSummary';\nimport ExpensesByCategoryChart from './ExpensesByCategoryChart';\nimport ExpensesByMonthChart from './ExpensesByMonthChart';\nimport AnalyticsMetrics from './AnalyticsMetrics';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Analytics = () => {\n  _s();\n  const [expenses, setExpenses] = useState([]);\n  const [incomes, setIncomes] = useState([]);\n  const [categories, setCategories] = useState([]);\n  const [userEmail, setUserEmail] = useState('');\n\n  // Handle email input\n  const handleEmailChange = event => {\n    setUserEmail(event.target.value);\n  };\n\n  // Fetch data when userEmail changes\n  useEffect(() => {\n    if (userEmail) {\n      // Fetch expenses\n      fetch(`/api/expenses/${userEmail}`).then(response => response.json()).then(data => {\n        console.log('Fetched Expenses:', data); // Debugging expenses\n        setExpenses(data);\n      }).catch(error => console.error('Error fetching expenses:', error));\n\n      // Fetch incomes\n      fetch(`/api/incomes/${userEmail}`).then(response => response.json()).then(data => {\n        console.log('Fetched Incomes:', data); // Debugging incomes\n        setIncomes(data);\n      }).catch(error => console.error('Error fetching incomes:', error));\n\n      // Fetch categories\n      fetch(`/api/categories/`).then(response => response.json()).then(data => {\n        console.log('Fetched Categories:', data); // Debugging categories\n        setCategories(data);\n      }).catch(error => console.error('Error fetching categories:', error));\n    }\n  }, [userEmail]);\n\n  // Calculate expenses by category\n  const expensesByCategory = expenses.reduce((acc, expense) => {\n    // Use CategoryName directly from expenses\n    const categoryName = expense.CategoryName || `Category ${expense.CategoryID}`;\n    console.log(`Category Name: ${categoryName}, Amount: ${expense.Amount}`); // Debug each calculation\n    acc[categoryName] = (acc[categoryName] || 0) + expense.Amount; // Sum up amounts\n    return acc;\n  }, {});\n\n  // Transform to array format for chart\n  const expensesByCategoryArray = Object.entries(expensesByCategory).map(([CategoryName, Amount]) => ({\n    CategoryName,\n    Amount\n  }));\n  console.log('Processed Expenses by Category:', expensesByCategoryArray); // Debugging final result\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"analytics\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Analytics\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"emailInput\",\n      children: \"Enter your email:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"email\",\n      id: \"emailInput\",\n      value: userEmail,\n      onChange: handleEmailChange,\n      placeholder: \"example@example.com\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ExpensesSummary, {\n      expenses: expenses\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(IncomesSummary, {\n      incomes: incomes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ExpensesByCategoryChart, {\n      expensesByCategory: expensesByCategoryArray\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ExpensesByMonthChart, {\n      monthlyExpenses: expenses\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AnalyticsMetrics, {\n      analytics: []\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n_s(Analytics, \"zq7O+bEKlsQnFZZkgXR8VG8qDMc=\");\n_c = Analytics;\nexport default Analytics;\nvar _c;\n$RefreshReg$(_c, \"Analytics\");","map":{"version":3,"names":["React","useEffect","useState","ExpensesSummary","IncomesSummary","ExpensesByCategoryChart","ExpensesByMonthChart","AnalyticsMetrics","jsxDEV","_jsxDEV","Analytics","_s","expenses","setExpenses","incomes","setIncomes","categories","setCategories","userEmail","setUserEmail","handleEmailChange","event","target","value","fetch","then","response","json","data","console","log","catch","error","expensesByCategory","reduce","acc","expense","categoryName","CategoryName","CategoryID","Amount","expensesByCategoryArray","Object","entries","map","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","id","onChange","placeholder","monthlyExpenses","analytics","_c","$RefreshReg$"],"sources":["/Users/nechama/Downloads/personal_finance_managment/frontend/src/components/Analytics/Analytics.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport ExpensesSummary from './ExpensesSummary';\nimport IncomesSummary from './IncomesSummary';\nimport ExpensesByCategoryChart from './ExpensesByCategoryChart';\nimport ExpensesByMonthChart from './ExpensesByMonthChart';\nimport AnalyticsMetrics from './AnalyticsMetrics';\n\ninterface Expense {\n  ExpenseID: number;\n  CategoryID: number;\n  CategoryName: string; // Add CategoryName to simplify access\n  Amount: number;\n  Date: Date;\n  Description?: string;\n}\n\ninterface Income {\n  IncomeID: number;\n  Amount: number;\n  Date: Date;\n  Description?: string;\n}\n\ninterface Category {\n  CategoryID: number;\n  CategoryName: string;\n  Email: string;\n}\n\nconst Analytics: React.FC = () => {\n  const [expenses, setExpenses] = useState<Expense[]>([]);\n  const [incomes, setIncomes] = useState<Income[]>([]);\n  const [categories, setCategories] = useState<Category[]>([]);\n  const [userEmail, setUserEmail] = useState<string>('');\n\n  // Handle email input\n  const handleEmailChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setUserEmail(event.target.value);\n  };\n\n  // Fetch data when userEmail changes\n  useEffect(() => {\n    if (userEmail) {\n      // Fetch expenses\n      fetch(`/api/expenses/${userEmail}`)\n        .then(response => response.json())\n        .then((data: Expense[]) => {\n          console.log('Fetched Expenses:', data); // Debugging expenses\n          setExpenses(data);\n        })\n        .catch(error => console.error('Error fetching expenses:', error));\n\n      // Fetch incomes\n      fetch(`/api/incomes/${userEmail}`)\n        .then(response => response.json())\n        .then((data: Income[]) => {\n          console.log('Fetched Incomes:', data); // Debugging incomes\n          setIncomes(data);\n        })\n        .catch(error => console.error('Error fetching incomes:', error));\n\n      // Fetch categories\n      fetch(`/api/categories/`)\n        .then(response => response.json())\n        .then((data: Category[]) => {\n          console.log('Fetched Categories:', data); // Debugging categories\n          setCategories(data);\n        })\n        .catch(error => console.error('Error fetching categories:', error));\n    }\n  }, [userEmail]);\n\n  // Calculate expenses by category\n  const expensesByCategory = expenses.reduce<Record<string, number>>((acc, expense) => {\n    // Use CategoryName directly from expenses\n    const categoryName = expense.CategoryName || `Category ${expense.CategoryID}`;\n    console.log(`Category Name: ${categoryName}, Amount: ${expense.Amount}`); // Debug each calculation\n    acc[categoryName] = (acc[categoryName] || 0) + expense.Amount; // Sum up amounts\n    return acc;\n  }, {});\n\n  // Transform to array format for chart\n  const expensesByCategoryArray = Object.entries(expensesByCategory).map(([CategoryName, Amount]) => ({\n    CategoryName,\n    Amount,\n  }));\n\n  console.log('Processed Expenses by Category:', expensesByCategoryArray); // Debugging final result\n\n  return (\n    <div className=\"analytics\">\n      <h1>Analytics</h1>\n      {/* Email input */}\n      <label htmlFor=\"emailInput\">Enter your email:</label>\n      <input\n        type=\"email\"\n        id=\"emailInput\"\n        value={userEmail}\n        onChange={handleEmailChange}\n        placeholder=\"example@example.com\"\n      />\n\n      {/* Components rendering data */}\n      <ExpensesSummary expenses={expenses} />\n      <IncomesSummary incomes={incomes} />\n      <ExpensesByCategoryChart expensesByCategory={expensesByCategoryArray} />\n      <ExpensesByMonthChart monthlyExpenses={expenses} />\n      <AnalyticsMetrics analytics={[]} />\n    </div>\n  );\n};\n\nexport default Analytics;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}