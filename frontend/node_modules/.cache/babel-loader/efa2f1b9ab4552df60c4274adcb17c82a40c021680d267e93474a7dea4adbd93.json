{"ast":null,"code":"var _jsxFileName = \"/Users/nechama/Downloads/personal_finance_managment/frontend/src/components/Transactions/Transactions.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Expenses from './Expenses';\nimport Incomes from './Incomes';\n// Import interfaces from TransactionsTypes\nimport { useUser } from '../../context/UserContext'; // Import the User context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Transactions = () => {\n  _s();\n  const {\n    email\n  } = useUser(); // Get email from context\n  const [expenses, setExpenses] = useState([]);\n  const [incomes, setIncomes] = useState([]);\n  const [expenseCategories, setExpenseCategories] = useState([]);\n  const [incomeCategories, setIncomeCategories] = useState([]);\n\n  // Fetch data when the email is available\n  useEffect(() => {\n    if (email) {\n      // Fetch expenses\n      fetch(`/api/expenses/${email}`).then(response => response.json()).then(data => {\n        const categoryNames = [...new Set(data.map(expense => expense.CategoryName.toLowerCase()))];\n        setExpenseCategories(categoryNames);\n        setExpenses(data);\n      }).catch(error => console.error('Error fetching expenses:', error));\n\n      // Fetch incomes\n      fetch(`/api/incomes/${email}`).then(response => response.json()).then(data => {\n        const categoryNames = [...new Set(data.map(income => income.CategoryName.toLowerCase()))];\n        setIncomeCategories(categoryNames);\n        setIncomes(data);\n      }).catch(error => console.error('Error fetching incomes:', error));\n    }\n  }, [email]);\n  const formatDate = date => {\n    const d = new Date(date);\n    if (isNaN(d.getTime())) {\n      console.error(\"Invalid date value:\", date);\n      return '';\n    }\n    return d.toISOString().split('T')[0]; // Return date in \"yyyy-MM-dd\" format\n  };\n  const addCategory = async (categoryName, type) => {\n    const endpoint = type === 'expense' ? '/api/categories/expense' : '/api/categories/income';\n    try {\n      const response = await fetch(endpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          CategoryName: categoryName,\n          Email: email\n        })\n      });\n      if (!response.ok) {\n        const errorMessage = await response.text();\n        console.error(\"Error creating category:\", errorMessage);\n        return;\n      }\n      const newCategory = await response.json();\n      if (type === 'expense') {\n        setExpenseCategories([...expenseCategories, newCategory.name.toLowerCase()]);\n      } else {\n        setIncomeCategories([...incomeCategories, newCategory.name.toLowerCase()]);\n      }\n    } catch (error) {\n      console.error(`Error creating ${type} category:`, error);\n    }\n  };\n  const updateExpense = async expense => {\n    try {\n      const completeExpense = {\n        ...expense,\n        Email: email,\n        // Use current email state\n        Date: formatDate(expense.Date) // Format date to \"yyyy-MM-dd\"\n      };\n      if (!completeExpense.Date) {\n        console.error(\"Invalid date for expense:\", completeExpense);\n        return;\n      }\n      const response = await fetch(`/api/expenses/${completeExpense.ExpenseID}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(completeExpense)\n      });\n      if (!response.ok) {\n        const errorMessage = await response.text();\n        console.error(\"Error updating expense:\", errorMessage);\n        return;\n      }\n      const updatedExpense = await response.json();\n      setExpenses(expenses.map(e => e.ExpenseID === updatedExpense.ExpenseID ? updatedExpense : e));\n    } catch (error) {\n      console.error(\"Error updating expense:\", error);\n    }\n  };\n  const deleteExpense = async id => {\n    try {\n      await fetch(`/api/expenses/${id}`, {\n        method: 'DELETE'\n      });\n      setExpenses(expenses.filter(e => e.ExpenseID !== id));\n    } catch (error) {\n      console.error(\"Error deleting expense:\", error);\n    }\n  };\n  const createExpense = async newExpense => {\n    try {\n      if (!newExpense.Date || isNaN(new Date(newExpense.Date).getTime())) {\n        console.error(\"Invalid date for expense:\", newExpense.Date);\n        return;\n      }\n      const completeExpense = {\n        ...newExpense,\n        Email: email,\n        // Use current email state\n        Amount: parseFloat(newExpense.Amount),\n        // Ensure amount is a number\n        Date: formatDate(newExpense.Date) // Format date to \"yyyy-MM-dd\"\n      };\n      const response = await fetch('/api/expenses', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(completeExpense)\n      });\n      if (!response.ok) {\n        const errorMessage = await response.text();\n        console.error(\"Error creating expense:\", errorMessage);\n        return;\n      }\n      const createdExpense = await response.json();\n      setExpenses([...expenses, createdExpense]);\n    } catch (error) {\n      console.error(\"Error creating expense:\", error);\n    }\n  };\n  const updateIncome = async income => {\n    try {\n      const completeIncome = {\n        ...income,\n        Email: email,\n        // Use current email state\n        Date: formatDate(income.Date) // Format date to \"yyyy-MM-dd\"\n      };\n      const response = await fetch(`/api/incomes/${completeIncome.IncomeID}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(completeIncome)\n      });\n      const updatedIncome = await response.json();\n      setIncomes(incomes.map(i => i.IncomeID === updatedIncome.IncomeID ? updatedIncome : i));\n    } catch (error) {\n      console.error(\"Error updating income:\", error);\n    }\n  };\n  const deleteIncome = async id => {\n    try {\n      await fetch(`/api/incomes/${id}`, {\n        method: 'DELETE'\n      });\n      setIncomes(incomes.filter(i => i.IncomeID !== id));\n    } catch (error) {\n      console.error(\"Error deleting income:\", error);\n    }\n  };\n  const createIncome = async newIncome => {\n    try {\n      if (!newIncome.Date || isNaN(new Date(newIncome.Date).getTime())) {\n        console.error(\"Invalid date for income:\", newIncome.Date);\n        return;\n      }\n      const completeIncome = {\n        ...newIncome,\n        Email: email,\n        // Use current email state\n        Amount: parseFloat(newIncome.Amount),\n        // Ensure amount is a number\n        Date: formatDate(newIncome.Date) // Format date to \"yyyy-MM-dd\"\n      };\n      const response = await fetch('/api/incomes', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(completeIncome)\n      });\n      if (!response.ok) {\n        const errorMessage = await response.text();\n        console.error(\"Error creating income:\", errorMessage);\n        return;\n      }\n      const createdIncome = await response.json();\n      setIncomes([...incomes, createdIncome]);\n    } catch (error) {\n      console.error(\"Error creating income:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Transactions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'space-around'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Expenses, {\n        expenses: expenses,\n        updateExpense: updateExpense,\n        deleteExpense: deleteExpense,\n        createExpense: createExpense,\n        addCategory: categoryName => addCategory(categoryName, 'expense'),\n        categories: expenseCategories,\n        userEmail: email\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Incomes, {\n        incomes: incomes,\n        updateIncome: updateIncome,\n        deleteIncome: deleteIncome,\n        createIncome: createIncome,\n        addCategory: categoryName => addCategory(categoryName, 'income'),\n        categories: incomeCategories,\n        userEmail: email\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 227,\n    columnNumber: 5\n  }, this);\n};\n_s(Transactions, \"elOPP2i2ewqabkf8z9EMnHtyWDI=\", false, function () {\n  return [useUser];\n});\n_c = Transactions;\nexport default Transactions;\nvar _c;\n$RefreshReg$(_c, \"Transactions\");","map":{"version":3,"names":["React","useState","useEffect","Expenses","Incomes","useUser","jsxDEV","_jsxDEV","Transactions","_s","email","expenses","setExpenses","incomes","setIncomes","expenseCategories","setExpenseCategories","incomeCategories","setIncomeCategories","fetch","then","response","json","data","categoryNames","Set","map","expense","CategoryName","toLowerCase","catch","error","console","income","formatDate","date","d","Date","isNaN","getTime","toISOString","split","addCategory","categoryName","type","endpoint","method","headers","body","JSON","stringify","Email","ok","errorMessage","text","newCategory","name","updateExpense","completeExpense","ExpenseID","updatedExpense","e","deleteExpense","id","filter","createExpense","newExpense","Amount","parseFloat","createdExpense","updateIncome","completeIncome","IncomeID","updatedIncome","i","deleteIncome","createIncome","newIncome","createdIncome","children","fileName","_jsxFileName","lineNumber","columnNumber","style","display","justifyContent","categories","userEmail","_c","$RefreshReg$"],"sources":["/Users/nechama/Downloads/personal_finance_managment/frontend/src/components/Transactions/Transactions.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Expenses from './Expenses';\nimport Incomes from './Incomes';\nimport { Expense, Income } from './TransactionsTypes'; // Import interfaces from TransactionsTypes\nimport { useUser } from '../../context/UserContext'; // Import the User context\n\nconst Transactions: React.FC = () => {\n  const { email } = useUser(); // Get email from context\n  const [expenses, setExpenses] = useState<Expense[]>([]);\n  const [incomes, setIncomes] = useState<Income[]>([]);\n  const [expenseCategories, setExpenseCategories] = useState<string[]>([]);\n  const [incomeCategories, setIncomeCategories] = useState<string[]>([]);\n\n  // Fetch data when the email is available\n  useEffect(() => {\n    if (email) {\n      // Fetch expenses\n      fetch(`/api/expenses/${email}`)\n        .then(response => response.json())\n        .then((data: Expense[]) => {\n          const categoryNames = [...new Set(data.map(expense => expense.CategoryName.toLowerCase()))];\n          setExpenseCategories(categoryNames);\n          setExpenses(data);\n        })\n        .catch(error => console.error('Error fetching expenses:', error));\n\n      // Fetch incomes\n      fetch(`/api/incomes/${email}`)\n        .then(response => response.json())\n        .then((data: Income[]) => {\n          const categoryNames = [...new Set(data.map(income => income.CategoryName.toLowerCase()))];\n          setIncomeCategories(categoryNames);\n          setIncomes(data);\n        })\n        .catch(error => console.error('Error fetching incomes:', error));\n    }\n  }, [email]);\n\n  const formatDate = (date: string | Date) => {\n    const d = new Date(date);\n    if (isNaN(d.getTime())) {\n      console.error(\"Invalid date value:\", date);\n      return '';\n    }\n    return d.toISOString().split('T')[0]; // Return date in \"yyyy-MM-dd\" format\n  };\n\n  const addCategory = async (categoryName: string, type: 'expense' | 'income') => {\n    const endpoint = type === 'expense' ? '/api/categories/expense' : '/api/categories/income';\n\n    try {\n      const response = await fetch(endpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ CategoryName: categoryName, Email: email }),\n      });\n\n      if (!response.ok) {\n        const errorMessage = await response.text();\n        console.error(\"Error creating category:\", errorMessage);\n        return;\n      }\n\n      const newCategory = await response.json();\n      if (type === 'expense') {\n        setExpenseCategories([...expenseCategories, newCategory.name.toLowerCase()]);\n      } else {\n        setIncomeCategories([...incomeCategories, newCategory.name.toLowerCase()]);\n      }\n    } catch (error) {\n      console.error(`Error creating ${type} category:`, error);\n    }\n  };\n\n  const updateExpense = async (expense: Expense) => {\n    try {\n      const completeExpense = {\n        ...expense,\n        Email: email, // Use current email state\n        Date: formatDate(expense.Date), // Format date to \"yyyy-MM-dd\"\n      };\n\n      if (!completeExpense.Date) {\n        console.error(\"Invalid date for expense:\", completeExpense);\n        return;\n      }\n\n      const response = await fetch(`/api/expenses/${completeExpense.ExpenseID}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(completeExpense),\n      });\n\n      if (!response.ok) {\n        const errorMessage = await response.text();\n        console.error(\"Error updating expense:\", errorMessage);\n        return;\n      }\n\n      const updatedExpense = await response.json();\n      setExpenses(expenses.map(e => (e.ExpenseID === updatedExpense.ExpenseID ? updatedExpense : e)));\n    } catch (error) {\n      console.error(\"Error updating expense:\", error);\n    }\n  };\n\n  const deleteExpense = async (id: number) => {\n    try {\n      await fetch(`/api/expenses/${id}`, {\n        method: 'DELETE',\n      });\n      setExpenses(expenses.filter(e => e.ExpenseID !== id));\n    } catch (error) {\n      console.error(\"Error deleting expense:\", error);\n    }\n  };\n\n  const createExpense = async (newExpense: Omit<Expense, 'ExpenseID'>) => {\n    try {\n      if (!newExpense.Date || isNaN(new Date(newExpense.Date).getTime())) {\n        console.error(\"Invalid date for expense:\", newExpense.Date);\n        return;\n      }\n\n      const completeExpense = {\n        ...newExpense,\n        Email: email, // Use current email state\n        Amount: parseFloat(newExpense.Amount as any), // Ensure amount is a number\n        Date: formatDate(newExpense.Date), // Format date to \"yyyy-MM-dd\"\n      };\n\n      const response = await fetch('/api/expenses', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(completeExpense),\n      });\n\n      if (!response.ok) {\n        const errorMessage = await response.text();\n        console.error(\"Error creating expense:\", errorMessage);\n        return;\n      }\n\n      const createdExpense = await response.json();\n      setExpenses([...expenses, createdExpense]);\n    } catch (error) {\n      console.error(\"Error creating expense:\", error);\n    }\n  };\n\n  const updateIncome = async (income: Income) => {\n    try {\n      const completeIncome = {\n        ...income,\n        Email: email, // Use current email state\n        Date: formatDate(income.Date), // Format date to \"yyyy-MM-dd\"\n      };\n\n      const response = await fetch(`/api/incomes/${completeIncome.IncomeID}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(completeIncome),\n      });\n\n      const updatedIncome = await response.json();\n      setIncomes(incomes.map(i => (i.IncomeID === updatedIncome.IncomeID ? updatedIncome : i)));\n    } catch (error) {\n      console.error(\"Error updating income:\", error);\n    }\n  };\n\n  const deleteIncome = async (id: number) => {\n    try {\n      await fetch(`/api/incomes/${id}`, {\n        method: 'DELETE',\n      });\n      setIncomes(incomes.filter(i => i.IncomeID !== id));\n    } catch (error) {\n      console.error(\"Error deleting income:\", error);\n    }\n  };\n\n  const createIncome = async (newIncome: Omit<Income, 'IncomeID'>) => {\n    try {\n      if (!newIncome.Date || isNaN(new Date(newIncome.Date).getTime())) {\n        console.error(\"Invalid date for income:\", newIncome.Date);\n        return;\n      }\n\n      const completeIncome = {\n        ...newIncome,\n        Email: email, // Use current email state\n        Amount: parseFloat(newIncome.Amount as any), // Ensure amount is a number\n        Date: formatDate(newIncome.Date), // Format date to \"yyyy-MM-dd\"\n      };\n\n      const response = await fetch('/api/incomes', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(completeIncome),\n      });\n\n      if (!response.ok) {\n        const errorMessage = await response.text();\n        console.error(\"Error creating income:\", errorMessage);\n        return;\n      }\n\n      const createdIncome = await response.json();\n      setIncomes([...incomes, createdIncome]);\n    } catch (error) {\n      console.error(\"Error creating income:\", error);\n    }\n  };\n\n  return (\n    <div>\n      <h1>Transactions</h1>\n      <div style={{ display: 'flex', justifyContent: 'space-around' }}>\n        <Expenses\n          expenses={expenses}\n          updateExpense={updateExpense}\n          deleteExpense={deleteExpense}\n          createExpense={createExpense}\n          addCategory={(categoryName: string) => addCategory(categoryName, 'expense')}\n          categories={expenseCategories}\n          userEmail={email}\n        />\n        <Incomes\n          incomes={incomes}\n          updateIncome={updateIncome}\n          deleteIncome={deleteIncome}\n          createIncome={createIncome}\n          addCategory={(categoryName: string) => addCategory(categoryName, 'income')}\n          categories={incomeCategories}\n          userEmail={email}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Transactions;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}