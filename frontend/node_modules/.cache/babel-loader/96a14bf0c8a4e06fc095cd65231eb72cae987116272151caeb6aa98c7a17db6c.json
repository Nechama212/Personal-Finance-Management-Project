{"ast":null,"code":"var _jsxFileName = \"/Users/nechama/Downloads/personal_finance_managment/frontend/src/components/Transactions/Transactions.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Expenses from './Expenses';\nimport Incomes from './Incomes';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Import interfaces from TransactionsTypes\n\nconst Transactions = () => {\n  _s();\n  const [email, setEmail] = useState(\"example@example.com\");\n  const [expenses, setExpenses] = useState([]);\n  const [incomes, setIncomes] = useState([]);\n  const [expenseCategories, setExpenseCategories] = useState([]);\n  const [incomeCategories, setIncomeCategories] = useState([]);\n  useEffect(() => {\n    if (email) {\n      fetch(`/api/expenses/${email}`).then(response => response.json()).then(data => {\n        const categoryNames = [...new Set(data.map(expense => expense.CategoryName.toLowerCase()))];\n        setExpenseCategories(categoryNames);\n        setExpenses(data);\n      }).catch(error => console.error('Error fetching expenses:', error));\n      fetch(`/api/incomes/${email}`).then(response => response.json()).then(data => {\n        const categoryNames = [...new Set(data.map(income => income.CategoryName.toLowerCase()))];\n        setIncomeCategories(categoryNames);\n        setIncomes(data);\n      }).catch(error => console.error('Error fetching incomes:', error));\n    }\n  }, [email]);\n  const formatDate = date => {\n    const d = new Date(date);\n    // Check if the date is valid\n    if (isNaN(d.getTime())) {\n      console.error(\"Invalid date value:\", date);\n      return '';\n    }\n    // Ensure the date is in ISO format \"yyyy-MM-dd\"\n    return d.toISOString().split('T')[0]; // Only return the date part in \"yyyy-MM-dd\" format\n  };\n  const addCategory = async (categoryName, type) => {\n    const endpoint = type === 'expense' ? '/api/categories/expense' : '/api/categories/income';\n    try {\n      const response = await fetch(endpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          CategoryName: categoryName,\n          Email: email\n        })\n      });\n      if (!response.ok) {\n        const errorMessage = await response.text();\n        console.error(\"Error creating category:\", errorMessage);\n        return;\n      }\n      const newCategory = await response.json();\n      console.log(\"New Category:\", newCategory);\n      if (type === 'expense') {\n        setExpenseCategories([...expenseCategories, newCategory.name.toLowerCase()]);\n      } else {\n        setIncomeCategories([...incomeCategories, newCategory.name.toLowerCase()]);\n      }\n    } catch (error) {\n      console.error(`Error creating ${type} category:`, error);\n    }\n  };\n  const updateExpense = async expense => {\n    try {\n      const completeExpense = {\n        ...expense,\n        Email: email,\n        // Use current email state\n        Date: formatDate(expense.Date) // Format date to \"yyyy-MM-dd\"\n      };\n      if (!completeExpense.Date) {\n        console.error(\"Invalid date for expense:\", completeExpense);\n        return;\n      }\n      console.log(\"Updating Expense Data:\", completeExpense);\n      const response = await fetch(`/api/expenses/${completeExpense.ExpenseID}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(completeExpense)\n      });\n      if (!response.ok) {\n        const errorMessage = await response.text();\n        console.error(\"Error updating expense:\", errorMessage);\n        return;\n      }\n      const updatedExpense = await response.json();\n      console.log(\"Updated Expense:\", updatedExpense);\n      setExpenses(expenses.map(e => e.ExpenseID === updatedExpense.ExpenseID ? updatedExpense : e));\n    } catch (error) {\n      console.error(\"Error updating expense:\", error);\n    }\n  };\n  const deleteExpense = async id => {\n    try {\n      await fetch(`/api/expenses/${id}`, {\n        method: 'DELETE'\n      });\n      setExpenses(expenses.filter(e => e.ExpenseID !== id));\n    } catch (error) {\n      console.error(\"Error deleting expense:\", error);\n    }\n  };\n  const createExpense = async newExpense => {\n    try {\n      console.log(\"New Expense Data:\", newExpense);\n      if (!newExpense.Date || isNaN(new Date(newExpense.Date).getTime())) {\n        console.error(\"Invalid date for expense:\", newExpense.Date);\n        return;\n      }\n      const completeExpense = {\n        ...newExpense,\n        Email: email,\n        // Use current email state\n        Amount: parseFloat(newExpense.Amount),\n        // Ensure amount is a number\n        Date: formatDate(newExpense.Date) // Format date to \"yyyy-MM-dd\"\n      };\n      console.log(\"Creating expense:\", completeExpense);\n      const response = await fetch('/api/expenses', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(completeExpense)\n      });\n      if (!response.ok) {\n        const errorMessage = await response.text();\n        console.error(\"Error creating expense:\", errorMessage);\n        return;\n      }\n      const createdExpense = await response.json();\n      console.log(\"Created Expense:\", createdExpense);\n      setExpenses([...expenses, createdExpense]);\n    } catch (error) {\n      console.error(\"Error creating expense:\", error);\n    }\n  };\n  const updateIncome = async income => {\n    try {\n      const completeIncome = {\n        ...income,\n        Email: email,\n        // Use current email state\n        Date: formatDate(income.Date) // Format date to \"yyyy-MM-dd\"\n      };\n      if (!completeIncome.Date) {\n        console.error(\"Invalid date for income:\", completeIncome);\n        return;\n      }\n      const response = await fetch(`/api/incomes/${completeIncome.IncomeID}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(completeIncome)\n      });\n      const updatedIncome = await response.json();\n      console.log(\"Updated Income:\", updatedIncome);\n      setIncomes(incomes.map(i => i.IncomeID === updatedIncome.IncomeID ? updatedIncome : i));\n    } catch (error) {\n      console.error(\"Error updating income:\", error);\n    }\n  };\n  const deleteIncome = async id => {\n    try {\n      await fetch(`/api/incomes/${id}`, {\n        method: 'DELETE'\n      });\n      setIncomes(incomes.filter(i => i.IncomeID !== id));\n    } catch (error) {\n      console.error(\"Error deleting income:\", error);\n    }\n  };\n  const createIncome = async newIncome => {\n    try {\n      console.log(\"New Income Data:\", newIncome);\n      if (!newIncome.Date || isNaN(new Date(newIncome.Date).getTime())) {\n        console.error(\"Invalid date for income:\", newIncome.Date);\n        return;\n      }\n      const completeIncome = {\n        ...newIncome,\n        Email: email,\n        // Use current email state\n        Amount: parseFloat(newIncome.Amount),\n        // Ensure amount is a number\n        Date: formatDate(newIncome.Date) // Format date to \"yyyy-MM-dd\"\n      };\n      console.log(\"Creating income:\", completeIncome);\n      const response = await fetch('/api/incomes', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(completeIncome)\n      });\n      if (!response.ok) {\n        const errorMessage = await response.text();\n        console.error(\"Error creating income:\", errorMessage);\n        return;\n      }\n      const createdIncome = await response.json();\n      console.log(\"Created Income:\", createdIncome);\n      setIncomes([...incomes, createdIncome]);\n    } catch (error) {\n      console.error(\"Error creating income:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Transactions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Email:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          value: email,\n          onChange: e => setEmail(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'space-around'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Expenses, {\n        expenses: expenses,\n        updateExpense: updateExpense,\n        deleteExpense: deleteExpense,\n        createExpense: createExpense,\n        addCategory: categoryName => addCategory(categoryName, 'expense'),\n        categories: expenseCategories // Pass expense categories prop\n        ,\n        userEmail: email // Pass user email\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Incomes, {\n        incomes: incomes,\n        updateIncome: updateIncome,\n        deleteIncome: deleteIncome,\n        createIncome: createIncome,\n        addCategory: categoryName => addCategory(categoryName, 'income'),\n        categories: incomeCategories // Pass income categories prop\n        ,\n        userEmail: email // Pass user email\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 242,\n    columnNumber: 5\n  }, this);\n};\n_s(Transactions, \"I1XspnCsSPGaxAdtl8A3jr1p8yw=\");\n_c = Transactions;\nexport default Transactions;\nvar _c;\n$RefreshReg$(_c, \"Transactions\");","map":{"version":3,"names":["React","useState","useEffect","Expenses","Incomes","jsxDEV","_jsxDEV","Transactions","_s","email","setEmail","expenses","setExpenses","incomes","setIncomes","expenseCategories","setExpenseCategories","incomeCategories","setIncomeCategories","fetch","then","response","json","data","categoryNames","Set","map","expense","CategoryName","toLowerCase","catch","error","console","income","formatDate","date","d","Date","isNaN","getTime","toISOString","split","addCategory","categoryName","type","endpoint","method","headers","body","JSON","stringify","Email","ok","errorMessage","text","newCategory","log","name","updateExpense","completeExpense","ExpenseID","updatedExpense","e","deleteExpense","id","filter","createExpense","newExpense","Amount","parseFloat","createdExpense","updateIncome","completeIncome","IncomeID","updatedIncome","i","deleteIncome","createIncome","newIncome","createdIncome","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","target","style","display","justifyContent","categories","userEmail","_c","$RefreshReg$"],"sources":["/Users/nechama/Downloads/personal_finance_managment/frontend/src/components/Transactions/Transactions.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Expenses from './Expenses';\nimport Incomes from './Incomes';\nimport { Expense, Income, Category } from './TransactionsTypes'; // Import interfaces from TransactionsTypes\n\nconst Transactions: React.FC = () => {\n  const [email, setEmail] = useState(\"example@example.com\");\n  const [expenses, setExpenses] = useState<Expense[]>([]);\n  const [incomes, setIncomes] = useState<Income[]>([]);\n  const [expenseCategories, setExpenseCategories] = useState<string[]>([]);\n  const [incomeCategories, setIncomeCategories] = useState<string[]>([]);\n\n  useEffect(() => {\n    if (email) {\n      fetch(`/api/expenses/${email}`)\n        .then(response => response.json())\n        .then((data: Expense[]) => {\n          const categoryNames = [...new Set(data.map(expense => expense.CategoryName.toLowerCase()))];\n          setExpenseCategories(categoryNames);\n          setExpenses(data);\n        })\n        .catch(error => console.error('Error fetching expenses:', error));\n\n      fetch(`/api/incomes/${email}`)\n        .then(response => response.json())\n        .then((data: Income[]) => {\n          const categoryNames = [...new Set(data.map(income => income.CategoryName.toLowerCase()))];\n          setIncomeCategories(categoryNames);\n          setIncomes(data);\n        })\n        .catch(error => console.error('Error fetching incomes:', error));\n    }\n  }, [email]);\n\n  const formatDate = (date: string | Date) => {\n    const d = new Date(date);\n    // Check if the date is valid\n    if (isNaN(d.getTime())) {\n      console.error(\"Invalid date value:\", date);\n      return '';\n    }\n    // Ensure the date is in ISO format \"yyyy-MM-dd\"\n    return d.toISOString().split('T')[0]; // Only return the date part in \"yyyy-MM-dd\" format\n  };\n\n  const addCategory = async (categoryName: string, type: 'expense' | 'income') => {\n    const endpoint = type === 'expense' ? '/api/categories/expense' : '/api/categories/income';\n\n    try {\n      const response = await fetch(endpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ CategoryName: categoryName, Email: email }),\n      });\n\n      if (!response.ok) {\n        const errorMessage = await response.text();\n        console.error(\"Error creating category:\", errorMessage);\n        return;\n      }\n\n      const newCategory = await response.json();\n      console.log(\"New Category:\", newCategory);\n      if (type === 'expense') {\n        setExpenseCategories([...expenseCategories, newCategory.name.toLowerCase()]);\n      } else {\n        setIncomeCategories([...incomeCategories, newCategory.name.toLowerCase()]);\n      }\n    } catch (error) {\n      console.error(`Error creating ${type} category:`, error);\n    }\n  };\n\n  const updateExpense = async (expense: Expense) => {\n    try {\n      const completeExpense = {\n        ...expense,\n        Email: email, // Use current email state\n        Date: formatDate(expense.Date), // Format date to \"yyyy-MM-dd\"\n      };\n\n      if (!completeExpense.Date) {\n        console.error(\"Invalid date for expense:\", completeExpense);\n        return;\n      }\n\n      console.log(\"Updating Expense Data:\", completeExpense);\n\n      const response = await fetch(`/api/expenses/${completeExpense.ExpenseID}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(completeExpense),\n      });\n\n      if (!response.ok) {\n        const errorMessage = await response.text();\n        console.error(\"Error updating expense:\", errorMessage);\n        return;\n      }\n\n      const updatedExpense = await response.json();\n      console.log(\"Updated Expense:\", updatedExpense);\n      setExpenses(expenses.map(e => (e.ExpenseID === updatedExpense.ExpenseID ? updatedExpense : e)));\n    } catch (error) {\n      console.error(\"Error updating expense:\", error);\n    }\n  };\n\n  const deleteExpense = async (id: number) => {\n    try {\n      await fetch(`/api/expenses/${id}`, {\n        method: 'DELETE',\n      });\n      setExpenses(expenses.filter(e => e.ExpenseID !== id));\n    } catch (error) {\n      console.error(\"Error deleting expense:\", error);\n    }\n  };\n\n  const createExpense = async (newExpense: Omit<Expense, 'ExpenseID'>) => {\n    try {\n      console.log(\"New Expense Data:\", newExpense);\n      if (!newExpense.Date || isNaN(new Date(newExpense.Date).getTime())) {\n        console.error(\"Invalid date for expense:\", newExpense.Date);\n        return;\n      }\n\n      const completeExpense = {\n        ...newExpense,\n        Email: email, // Use current email state\n        Amount: parseFloat(newExpense.Amount as any), // Ensure amount is a number\n        Date: formatDate(newExpense.Date), // Format date to \"yyyy-MM-dd\"\n      };\n\n      console.log(\"Creating expense:\", completeExpense);\n\n      const response = await fetch('/api/expenses', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(completeExpense),\n      });\n\n      if (!response.ok) {\n        const errorMessage = await response.text();\n        console.error(\"Error creating expense:\", errorMessage);\n        return;\n      }\n\n      const createdExpense = await response.json();\n      console.log(\"Created Expense:\", createdExpense);\n      setExpenses([...expenses, createdExpense]);\n    } catch (error) {\n      console.error(\"Error creating expense:\", error);\n    }\n  };\n\n  const updateIncome = async (income: Income) => {\n    try {\n      const completeIncome = {\n        ...income,\n        Email: email, // Use current email state\n        Date: formatDate(income.Date), // Format date to \"yyyy-MM-dd\"\n      };\n\n      if (!completeIncome.Date) {\n        console.error(\"Invalid date for income:\", completeIncome);\n        return;\n      }\n\n      const response = await fetch(`/api/incomes/${completeIncome.IncomeID}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(completeIncome),\n      });\n      const updatedIncome = await response.json();\n      console.log(\"Updated Income:\", updatedIncome);\n      setIncomes(incomes.map(i => (i.IncomeID === updatedIncome.IncomeID ? updatedIncome : i)));\n    } catch (error) {\n      console.error(\"Error updating income:\", error);\n    }\n  };\n\n  const deleteIncome = async (id: number) => {\n    try {\n      await fetch(`/api/incomes/${id}`, {\n        method: 'DELETE',\n      });\n      setIncomes(incomes.filter(i => i.IncomeID !== id));\n    } catch (error) {\n      console.error(\"Error deleting income:\", error);\n    }\n  };\n\n  const createIncome = async (newIncome: Omit<Income, 'IncomeID'>) => {\n    try {\n      console.log(\"New Income Data:\", newIncome);\n      if (!newIncome.Date || isNaN(new Date(newIncome.Date).getTime())) {\n        console.error(\"Invalid date for income:\", newIncome.Date);\n        return;\n      }\n\n      const completeIncome = {\n        ...newIncome,\n        Email: email, // Use current email state\n        Amount: parseFloat(newIncome.Amount as any), // Ensure amount is a number\n        Date: formatDate(newIncome.Date), // Format date to \"yyyy-MM-dd\"\n      };\n\n      console.log(\"Creating income:\", completeIncome);\n\n      const response = await fetch('/api/incomes', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(completeIncome),\n      });\n\n      if (!response.ok) {\n        const errorMessage = await response.text();\n        console.error(\"Error creating income:\", errorMessage);\n        return;\n      }\n\n      const createdIncome = await response.json();\n      console.log(\"Created Income:\", createdIncome);\n      setIncomes([...incomes, createdIncome]);\n    } catch (error) {\n      console.error(\"Error creating income:\", error);\n    }\n  };\n\n  return (\n    <div>\n      <h1>Transactions</h1>\n      <div>\n        <label>\n          Email:\n          <input type=\"email\" value={email} onChange={(e) => setEmail(e.target.value)} />\n        </label>\n      </div>\n      <div style={{ display: 'flex', justifyContent: 'space-around' }}>\n        <Expenses\n          expenses={expenses}\n          updateExpense={updateExpense}\n          deleteExpense={deleteExpense}\n          createExpense={createExpense}\n          addCategory={(categoryName: string) => addCategory(categoryName, 'expense')}\n          categories={expenseCategories} // Pass expense categories prop\n          userEmail={email} // Pass user email\n        />\n        <Incomes\n          incomes={incomes}\n          updateIncome={updateIncome}\n          deleteIncome={deleteIncome}\n          createIncome={createIncome}\n          addCategory={(categoryName: string) => addCategory(categoryName, 'income')}\n          categories={incomeCategories} // Pass income categories prop\n          userEmail={email} // Pass user email\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Transactions;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}